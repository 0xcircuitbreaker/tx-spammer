package main

import (
	"context"
	"encoding/hex"
	"fmt"
	"math/big"
	"testing"
	"time"

	interfaces "github.com/dominant-strategies/go-quai"
	"github.com/dominant-strategies/go-quai/common"
	"github.com/dominant-strategies/go-quai/core/types"
	"github.com/dominant-strategies/go-quai/crypto"
	"github.com/dominant-strategies/go-quai/rlp"
	"github.com/dominant-strategies/tx-spammer/util"
	"github.com/holiman/uint256"
)

func ExternalNFTTransfer(wallets map[string][]wallet, address string) {
	binary := "60806040523480156200001157600080fd5b506040518060400160405280601481526020017f517561692043726f73732d436861696e204e46540000000000000000000000008152506000908162000058919062000f84565b506040518060400160405280600381526020017f5158430000000000000000000000000000000000000000000000000000000000815250600190816200009f919062000f84565b5033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040518060400160405280600060ff168152602001601d60ff16815250600f6000600d81106200011657620001156200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280601e60ff168152602001603a60ff16815250600f6001600d81106200019157620001906200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280603b60ff168152602001605760ff16815250600f6002600d81106200020c576200020b6200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280605860ff168152602001607360ff16815250600f6003600d81106200028757620002866200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280607460ff168152602001608f60ff16815250600f6004600d81106200030257620003016200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280609060ff16815260200160ab60ff16815250600f6005600d81106200037d576200037c6200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060ac60ff16815260200160c760ff16815250600f6006600d8110620003f857620003f76200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060c860ff16815260200160e360ff16815250600f6007600d81106200047357620004726200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060e460ff16815260200160ff8016815250600f6008600d8110620004ed57620004ec6200106b565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050600062000568600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16620005a860201b60201c565b60ff169050620005a1600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682620006cf60201b60201c565b50620012b1565b600080620005bc83620007d660201b60201c565b600081518110620005d257620005d16200106b565b5b602001015160f81c60f81b60f81c905060005b60098160ff1610156200068c57600f8160ff16600d81106200060c576200060b6200106b565b5b0160000160009054906101000a900460ff1660ff168260ff1610158015620006655750600f8160ff16600d81106200064957620006486200106b565b5b0160000160019054906101000a900460ff1660ff168260ff1611155b1562000676578092505050620006ca565b80806200068390620010d6565b915050620005e5565b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006c19062001165565b60405180910390fd5b919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620007445760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016200073b9190620011cc565b60405180910390fd5b60006200075a838360006200080160201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614620007d15760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401620007c89190620011cc565b60405180910390fd5b505050565b606081604051602001620007eb919062001239565b6040516020818303038152906040529050919050565b600080620008158462000a5660201b60201c565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161462000860576200085f81848662000a9360201b60201c565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146200091a57601e600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001601d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146200099e576001601d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b84601c600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6000601c600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b62000aa683838362000b6560201b60201c565b62000b6057600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160362000b1f57806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040162000b16919062001267565b60405180910390fd5b81816040517f177e802f00000000000000000000000000000000000000000000000000000000815260040162000b5792919062001284565b60405180910390fd5b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801562000c3057508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148062000be8575062000be7848462000c3960201b60201c565b5b8062000c2f57508273ffffffffffffffffffffffffffffffffffffffff1662000c178362000ccd60201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000601f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000601e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000d8c57607f821691505b60208210810362000da25762000da162000d44565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000e0c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000dcd565b62000e18868362000dcd565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000e6562000e5f62000e598462000e30565b62000e3a565b62000e30565b9050919050565b6000819050919050565b62000e818362000e44565b62000e9962000e908262000e6c565b84845462000dda565b825550505050565b600090565b62000eb062000ea1565b62000ebd81848462000e76565b505050565b5b8181101562000ee55762000ed960008262000ea6565b60018101905062000ec3565b5050565b601f82111562000f345762000efe8162000da8565b62000f098462000dbd565b8101602085101562000f19578190505b62000f3162000f288562000dbd565b83018262000ec2565b50505b505050565b600082821c905092915050565b600062000f596000198460080262000f39565b1980831691505092915050565b600062000f74838362000f46565b9150826002028217905092915050565b62000f8f8262000d0a565b67ffffffffffffffff81111562000fab5762000faa62000d15565b5b62000fb7825462000d73565b62000fc482828562000ee9565b600060209050601f83116001811462000ffc576000841562000fe7578287015190505b62000ff3858262000f66565b86555062001063565b601f1984166200100c8662000da8565b60005b8281101562001036578489015182556001820191506020850194506020810190506200100f565b8683101562001056578489015162001052601f89168262000f46565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000620010e382620010c9565b915060ff8203620010f957620010f86200109a565b5b600182019050919050565b600082825260208201905092915050565b7f496e76616c6964204c6f636174696f6e00000000000000000000000000000000600082015250565b60006200114d60108362001104565b91506200115a8262001115565b602082019050919050565b6000602082019050818103600083015262001180816200113e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620011b48262001187565b9050919050565b620011c681620011a7565b82525050565b6000602082019050620011e36000830184620011bb565b92915050565b60008160601b9050919050565b60006200120382620011e9565b9050919050565b60006200121782620011f6565b9050919050565b620012336200122d82620011a7565b6200120a565b82525050565b60006200124782846200121e565b60148201915081905092915050565b620012618162000e30565b82525050565b60006020820190506200127e600083018462001256565b92915050565b60006040820190506200129b6000830185620011bb565b620012aa602083018462001256565b9392505050565b61314880620012c16000396000f3fe6080604052600436106101145760003560e01c80636352211e116100a0578063bc472aa311610064578063bc472aa3146103d4578063c87b56dd14610411578063e20e50ba1461044e578063e985e9c514610477578063f5adec88146104b457610114565b80636352211e146102dd57806370a082311461031a57806395d89b4114610357578063a22cb46514610382578063b88d4fde146103ab57610114565b806323b872dd116100e757806323b872dd146101d3578063399444bc146101fc57806342842e0e14610239578063429437bf14610262578063593b79fe146102a057610114565b806306fdde0314610119578063081812fc14610144578063095ea7b31461018157806320e8dd93146101aa575b600080fd5b34801561012557600080fd5b5061012e6104d0565b60405161013b9190612135565b60405180910390f35b34801561015057600080fd5b5061016b600480360381019061016691906121a1565b610562565b604051610178919061220f565b60405180910390f35b34801561018d57600080fd5b506101a860048036038101906101a39190612256565b61057d565b005b3480156101b657600080fd5b506101d160048036038101906101cc9190612256565b61058d565b005b3480156101df57600080fd5b506101fa60048036038101906101f59190612296565b610854565b005b34801561020857600080fd5b50610223600480360381019061021e91906122e9565b61094f565b6040516102309190612332565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b9190612296565b610a5c565b005b34801561026e57600080fd5b50610289600480360381019061028491906121a1565b610a7c565b60405161029792919061234d565b60405180910390f35b3480156102ac57600080fd5b506102c760048036038101906102c291906122e9565b610abd565b6040516102d491906123cb565b60405180910390f35b3480156102e957600080fd5b5061030460048036038101906102ff91906121a1565b610ae6565b604051610311919061220f565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c91906122e9565b610b6e565b60405161034e91906123fc565b60405180910390f35b34801561036357600080fd5b5061036c610c28565b6040516103799190612135565b60405180910390f35b34801561038e57600080fd5b506103a960048036038101906103a4919061244f565b610cba565b005b3480156103b757600080fd5b506103d260048036038101906103cd91906125c4565b610cc9565b005b3480156103e057600080fd5b506103fb60048036038101906103f691906121a1565b610ce6565b604051610408919061220f565b60405180910390f35b34801561041d57600080fd5b50610438600480360381019061043391906121a1565b610d1c565b6040516104459190612135565b60405180910390f35b34801561045a57600080fd5b5061047560048036038101906104709190612673565b610d84565b005b34801561048357600080fd5b5061049e600480360381019061049991906126b3565b610fa4565b6040516104ab9190612702565b60405180910390f35b6104ce60048036038101906104c9919061271d565b611038565b005b6060600080546104df906127d9565b80601f016020809104026020016040519081016040528092919081815260200182805461050b906127d9565b80156105585780601f1061052d57610100808354040283529160200191610558565b820191906000526020600020905b81548152906001019060200180831161053b57829003601f168201915b5050505050905090565b600061056d826114e7565b61057682611563565b9050919050565b6105888282336115a0565b505050565b3373ffffffffffffffffffffffffffffffffffffffff1660036105af3361094f565b60ff16600c81106105c3576105c261280a565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16143360405160200161060d9190612881565b60405160208183030381529060405260405160200161062c919061297b565b6040516020818303038152906040529061067c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106739190612135565b60405180910390fd5b50600073ffffffffffffffffffffffffffffffffffffffff16601c600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461071f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610716906129f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16146107a2576001601d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b81601c600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108c65760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016108bd919061220f565b60405180910390fd5b60006108d3838333611724565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610949578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161094093929190612a14565b60405180910390fd5b50505050565b60008061095b83610abd565b60008151811061096e5761096d61280a565b5b602001015160f81c60f81b60f81c905060005b60098160ff161015610a1b57600f8160ff16600d81106109a4576109a361280a565b5b0160000160009054906101000a900460ff1660ff168260ff16101580156109f95750600f8160ff16600d81106109dd576109dc61280a565b5b0160000160019054906101000a900460ff1660ff168260ff1611155b15610a08578092505050610a57565b8080610a1390612a7a565b915050610981565b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a4e90612aef565b60405180910390fd5b919050565b610a7783838360405180602001604052806000815250610cc9565b505050565b600f81600d8110610a8c57600080fd5b016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b606081604051602001610ad09190612881565b6040516020818303038152906040529050919050565b600080610af283611966565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610b6557826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610b5c91906123fc565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610be15760006040517f89c62b64000000000000000000000000000000000000000000000000000000008152600401610bd8919061220f565b60405180910390fd5b601d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b606060018054610c37906127d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c63906127d9565b8015610cb05780601f10610c8557610100808354040283529160200191610cb0565b820191906000526020600020905b815481529060010190602001808311610c9357829003601f168201915b5050505050905090565b610cc53383836119a3565b5050565b610cd4848484610854565b610ce084848484611b12565b50505050565b600381600c8110610cf657600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060610d27826114e7565b6000610d31611cc2565b90506000815111610d515760405180602001604052806000815250610d7c565b80610d5b84611cff565b604051602001610d6c929190612b40565b6040516020818303038152906040525b915050919050565b600081f790508015610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc290612bb0565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5290612c1c565b60405180910390fd5b60098360ff1610610ea1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9890612c88565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660038460ff16600c8110610ed057610ecf61280a565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f90612d1a565b60405180910390fd5b8160038460ff16600c8110610f6057610f5f61280a565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000601f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600085f79050801561107f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107690612bb0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614806110e65750600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16145b156111295760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611120919061220f565b60405180910390fd5b8673ffffffffffffffffffffffffffffffffffffffff1661114986611966565b73ffffffffffffffffffffffffffffffffffffffff161461119f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119690612dac565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146111de576111dd873387611dcd565b5b601e600086815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001601d60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550601c600086815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600060036112a58861094f565b60ff16600c81106112b9576112b861280a565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361134c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134390612e3e565b60405180910390fd5b600085858561135b9190612e5e565b6113659190612e92565b90508034101561137482611cff565b6040516020016113849190612f92565b604051602081830303815290604052906113d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113cb9190612135565b60405180910390fd5b50600088886040516024016113ea929190612fbf565b6040516020818303038152906040527f20e8dd93000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000835160208501898b8d60008b6000f69050888a73ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff167fcf0ee562475620bbcd2f1b0675c8163317513271e4fdbbe9722436f247bd6d9960405160405180910390a45050505050505050505050565b600073ffffffffffffffffffffffffffffffffffffffff1661150882611966565b73ffffffffffffffffffffffffffffffffffffffff160361156057806040517f7e27328900000000000000000000000000000000000000000000000000000000815260040161155791906123fc565b60405180910390fd5b50565b6000601e600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806115ac84610ae6565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561161757508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b801561162a57506116288184610fa4565b155b1561166c57826040517fa9fbf51f000000000000000000000000000000000000000000000000000000008152600401611663919061220f565b60405180910390fd5b84601e600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4809150509392505050565b60008061173084611966565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461177257611771818486611dcd565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461182b57601e600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001601d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118ae576001601d60008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b84601c600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6000601c600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611a1457816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401611a0b919061220f565b60405180910390fd5b80601f60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611b059190612702565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611cbc578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02338685856040518563ffffffff1660e01b8152600401611b719493929190612fe8565b6020604051808303816000875af1925050508015611bad57506040513d601f19601f82011682018060405250810190611baa919061308c565b60015b611c31573d8060008114611bdd576040519150601f19603f3d011682016040523d82523d6000602084013e611be2565b606091505b506000815103611c2957836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c20919061220f565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611cba57836040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611cb1919061220f565b60405180910390fd5b505b50505050565b60606040518060400160405280601281526020017f68747470733a2f2f71752e61692f6e66742f0000000000000000000000000000815250905090565b606060006001611d0e84611e91565b01905060008167ffffffffffffffff811115611d2d57611d2c612499565b5b6040519080825280601f01601f191660200182016040528015611d5f5781602001600182028036833780820191505090505b509050600082602001820190505b600115611dc2578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611db657611db56130b9565b5b04945060008503611d6d575b819350505050919050565b611dd8838383611fe4565b611e8c57600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611e4d57806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611e4491906123fc565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611e83929190612fbf565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611eef577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ee557611ee46130b9565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f2c576d04ee2d6d415b85acef81000000008381611f2257611f216130b9565b5b0492506020810190505b662386f26fc100008310611f5b57662386f26fc100008381611f5157611f506130b9565b5b0492506010810190505b6305f5e1008310611f84576305f5e1008381611f7a57611f796130b9565b5b0492506008810190505b6127108310611fa9576127108381611f9f57611f9e6130b9565b5b0492506004810190505b60648310611fcc5760648381611fc257611fc16130b9565b5b0492506002810190505b600a8310611fdb576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561209c57508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061205d575061205c8484610fa4565b5b8061209b57508273ffffffffffffffffffffffffffffffffffffffff1661208383611563565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120df5780820151818401526020810190506120c4565b60008484015250505050565b6000601f19601f8301169050919050565b6000612107826120a5565b61211181856120b0565b93506121218185602086016120c1565b61212a816120eb565b840191505092915050565b6000602082019050818103600083015261214f81846120fc565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61217e8161216b565b811461218957600080fd5b50565b60008135905061219b81612175565b92915050565b6000602082840312156121b7576121b6612161565b5b60006121c58482850161218c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121f9826121ce565b9050919050565b612209816121ee565b82525050565b60006020820190506122246000830184612200565b92915050565b612233816121ee565b811461223e57600080fd5b50565b6000813590506122508161222a565b92915050565b6000806040838503121561226d5761226c612161565b5b600061227b85828601612241565b925050602061228c8582860161218c565b9150509250929050565b6000806000606084860312156122af576122ae612161565b5b60006122bd86828701612241565b93505060206122ce86828701612241565b92505060406122df8682870161218c565b9150509250925092565b6000602082840312156122ff576122fe612161565b5b600061230d84828501612241565b91505092915050565b600060ff82169050919050565b61232c81612316565b82525050565b60006020820190506123476000830184612323565b92915050565b60006040820190506123626000830185612323565b61236f6020830184612323565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061239d82612376565b6123a78185612381565b93506123b78185602086016120c1565b6123c0816120eb565b840191505092915050565b600060208201905081810360008301526123e58184612392565b905092915050565b6123f68161216b565b82525050565b600060208201905061241160008301846123ed565b92915050565b60008115159050919050565b61242c81612417565b811461243757600080fd5b50565b60008135905061244981612423565b92915050565b6000806040838503121561246657612465612161565b5b600061247485828601612241565b92505060206124858582860161243a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124d1826120eb565b810181811067ffffffffffffffff821117156124f0576124ef612499565b5b80604052505050565b6000612503612157565b905061250f82826124c8565b919050565b600067ffffffffffffffff82111561252f5761252e612499565b5b612538826120eb565b9050602081019050919050565b82818337600083830152505050565b600061256761256284612514565b6124f9565b90508281526020810184848401111561258357612582612494565b5b61258e848285612545565b509392505050565b600082601f8301126125ab576125aa61248f565b5b81356125bb848260208601612554565b91505092915050565b600080600080608085870312156125de576125dd612161565b5b60006125ec87828801612241565b94505060206125fd87828801612241565b935050604061260e8782880161218c565b925050606085013567ffffffffffffffff81111561262f5761262e612166565b5b61263b87828801612596565b91505092959194509250565b61265081612316565b811461265b57600080fd5b50565b60008135905061266d81612647565b92915050565b6000806040838503121561268a57612689612161565b5b60006126988582860161265e565b92505060206126a985828601612241565b9150509250929050565b600080604083850312156126ca576126c9612161565b5b60006126d885828601612241565b92505060206126e985828601612241565b9150509250929050565b6126fc81612417565b82525050565b600060208201905061271760008301846126f3565b92915050565b60008060008060008060c0878903121561273a57612739612161565b5b600061274889828a01612241565b965050602061275989828a01612241565b955050604061276a89828a0161218c565b945050606061277b89828a0161218c565b935050608061278c89828a0161218c565b92505060a061279d89828a0161218c565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806127f157607f821691505b602082108103612804576128036127aa565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b600061285182612839565b9050919050565b600061286382612846565b9050919050565b61287b612876826121ee565b612858565b82525050565b600061288d828461286a565b60148201915081905092915050565b600081905092915050565b7f53656e6465722000000000000000000000000000000000000000000000000000600082015250565b60006128dd60078361289c565b91506128e8826128a7565b600782019050919050565b600081905092915050565b600061290982612376565b61291381856128f3565b93506129238185602086016120c1565b80840191505092915050565b7f206e6f7420617070726f76656400000000000000000000000000000000000000600082015250565b6000612965600d8361289c565b91506129708261292f565b600d82019050919050565b6000612986826128d0565b915061299282846128fe565b915061299d82612958565b915081905092915050565b7f546f6b656e20616c726561647920657869737473000000000000000000000000600082015250565b60006129de6014836120b0565b91506129e9826129a8565b602082019050919050565b60006020820190508181036000830152612a0d816129d1565b9050919050565b6000606082019050612a296000830186612200565b612a3660208301856123ed565b612a436040830184612200565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a8582612316565b915060ff8203612a9857612a97612a4b565b5b600182019050919050565b7f496e76616c6964204c6f636174696f6e00000000000000000000000000000000600082015250565b6000612ad96010836120b0565b9150612ae482612aa3565b602082019050919050565b60006020820190508181036000830152612b0881612acc565b9050919050565b6000612b1a826120a5565b612b24818561289c565b9350612b348185602086016120c1565b80840191505092915050565b6000612b4c8285612b0f565b9150612b588284612b0f565b91508190509392505050565b7f41646472657373206973206e6f742065787465726e616c000000000000000000600082015250565b6000612b9a6017836120b0565b9150612ba582612b64565b602082019050919050565b60006020820190508181036000830152612bc981612b8d565b9050919050565b7f53656e646572206973206e6f74206465706c6f79657200000000000000000000600082015250565b6000612c066016836120b0565b9150612c1182612bd0565b602082019050919050565b60006020820190508181036000830152612c3581612bf9565b9050919050565b7f4d61782039207a6f6e6573000000000000000000000000000000000000000000600082015250565b6000612c72600b836120b0565b9150612c7d82612c3c565b602082019050919050565b60006020820190508181036000830152612ca181612c65565b9050919050565b7f54686520617070726f766564206164647265737320666f722074686973207a6f60008201527f6e6520616c726561647920657869737473000000000000000000000000000000602082015250565b6000612d046031836120b0565b9150612d0f82612ca8565b604082019050919050565b60006020820190508181036000830152612d3381612cf7565b9050919050565b7f5472616e73666572206f6620746f6b656e2074686174206973206e6f74206f7760008201527f6e65642062792066726f6d000000000000000000000000000000000000000000602082015250565b6000612d96602b836120b0565b9150612da182612d3a565b604082019050919050565b60006020820190508181036000830152612dc581612d89565b9050919050565b7f546f6b656e206973206e6f7420617661696c61626c65206f6e2074686520646560008201527f7374696e6174696f6e20636861696e0000000000000000000000000000000000602082015250565b6000612e28602f836120b0565b9150612e3382612dcc565b604082019050919050565b60006020820190508181036000830152612e5781612e1b565b9050919050565b6000612e698261216b565b9150612e748361216b565b9250828201905080821115612e8c57612e8b612a4b565b5b92915050565b6000612e9d8261216b565b9150612ea88361216b565b9250828202612eb68161216b565b91508282048414831517612ecd57612ecc612a4b565b5b5092915050565b7f4e6f7420656e6f756768206761732073656e742c206e656564206174206c656160008201527f7374200000000000000000000000000000000000000000000000000000000000602082015250565b6000612f3060238361289c565b9150612f3b82612ed4565b602382019050919050565b7f2077656900000000000000000000000000000000000000000000000000000000600082015250565b6000612f7c60048361289c565b9150612f8782612f46565b600482019050919050565b6000612f9d82612f23565b9150612fa98284612b0f565b9150612fb482612f6f565b915081905092915050565b6000604082019050612fd46000830185612200565b612fe160208301846123ed565b9392505050565b6000608082019050612ffd6000830187612200565b61300a6020830186612200565b61301760408301856123ed565b81810360608301526130298184612392565b905095945050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61306981613034565b811461307457600080fd5b50565b60008151905061308681613060565b92915050565b6000602082840312156130a2576130a1612161565b5b60006130b084828501613077565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea26469706673582212201987bbab00cd54e185bb5bca07d052d2e872c41e82967f144ad7fc7e2626105564736f6c63782c302e382e31382d646576656c6f702e323032322e31312e382b636f6d6d69742e36306161353861362e6d6f64005d"

	config, err := util.LoadConfig(".")
	if err != nil {
		fmt.Println("cannot load config: " + err.Error())
		return
	}
	allClients := getNodeClients(config)
	region := 0
	from_zone := 0
	if !allClients.zonesAvailable[region][from_zone] {
		return
	}
	client := allClients.zoneClients[region][from_zone] // cyprus 1 node client
	signer := types.LatestSigner(PARAMS)
	zoneWallets := wallets["zone-"+fmt.Sprintf("%d-%d", region, from_zone)] // get wallet from file
	fromAddr := common.HexToAddress(zoneWallets[0].Address)
	fromPrivKey, err := crypto.ToECDSA(common.FromHex(zoneWallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	common.NodeLocation = *fromAddr.Location()
	nonce, err := client.PendingNonceAt(context.Background(), fromAddr)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddr, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s\n", fromAddr.String(), balance.String())
	// Deploy QXC contract with the proper address that gives me tokens in zone 0-0
	contract, err := hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i := uint8(0)
	contract = append(contract, i)
	var contractAddr common.Address
	// Grind contract address
	for {
		contract[len(contract)-1] = i
		contractAddr = crypto.CreateAddress(fromAddr, nonce, contract)
		if common.IsInChainScope(contractAddr.Bytes()) {
			break
		}
		i++
	}
	inner_tx := types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)                                                  // Wait for it to be mined
	cyprus2Client := allClients.zoneClients[region][from_zone+1]                 // cyprus 2 node client
	cyprus2Wallets := wallets["zone-"+fmt.Sprintf("%d-%d", region, from_zone+1)] // get cyprus2 wallet from file
	cyprus2Addr := common.HexToAddress(cyprus2Wallets[0].Address)
	cyprus2PrivKey, err := crypto.ToECDSA(common.FromHex(cyprus2Wallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	common.NodeLocation = *cyprus2Addr.Location()
	cyprus2Nonce, err := cyprus2Client.PendingNonceAt(context.Background(), cyprus2Addr)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Deploy QXC contract with the proper address that gives me tokens in zone 0-1
	contract, err = hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i = uint8(0)
	contract = append(contract, i)
	var cyprus2ContractAddr common.Address
	// Grind contract address
	for {
		contract[len(contract)-1] = i
		cyprus2ContractAddr = crypto.CreateAddress(cyprus2Addr, cyprus2Nonce, contract)
		if common.IsInChainScope(cyprus2ContractAddr.Bytes()) {
			break
		}
		i++
	}
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: cyprus2Nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, cyprus2PrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = cyprus2Client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Here, set contractAddr as an approved contract for zone 0-0 (chain 0) in zone 0-1
	sig := crypto.Keccak256([]byte("AddApprovedAddress(uint8,address)"))[:4]
	chain := uint256.NewInt(0)
	approvedAddress := new(uint256.Int).SetBytes(contractAddr.Bytes())
	data := make([]byte, 0, 0)
	data = append(data, sig...)
	temp := chain.Bytes32()
	data = append(data, temp[:]...)
	temp = approvedAddress.Bytes32()
	data = append(data, temp[:]...)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: cyprus2Nonce + 1, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &cyprus2ContractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, cyprus2PrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = cyprus2Client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Here, set cyprus2ContractAddr as an approved contract for zone 0-1 (chain 1) in zone 0-0
	sig = crypto.Keccak256([]byte("AddApprovedAddress(uint8,address)"))[:4]
	chain = uint256.NewInt(1)
	approvedAddress = new(uint256.Int).SetBytes(cyprus2ContractAddr.Bytes())
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = chain.Bytes32()
	data = append(data, temp[:]...)
	temp = approvedAddress.Bytes32()
	data = append(data, temp[:]...)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce + 1, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &contractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(15 * time.Second)
	// Check ownerOf tokenId
	sig = crypto.Keccak256([]byte("ownerOf(uint256)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = uint256.NewInt(0).Bytes32()
	data = append(data, temp[:]...)
	data2, err := cyprus2Client.CallContract(context.Background(), interfaces.CallMsg{From: cyprus2Addr, To: &cyprus2ContractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("Owner of tokenId 0 in zone 0-1: " + common.BytesToAddress(data2).Hex())
	// Transfer 1 token from my address in zone 0-0 (cyprus 1) to zone 0-1 (cyprus 2)
	sig = crypto.Keccak256([]byte("crossChainTransfer(address,address,uint256,uint256,uint256,uint256)"))[:4] // crossChainTransfer(address to, uint256 amount, uint256 gasLimit, uint256 minerTip, uint256 baseFee)
	from, err := uint256.FromHex(fromAddr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	to, err := uint256.FromHex(cyprus2Addr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	tokenId := uint256.NewInt(0)
	gasLimit := uint256.NewInt(1000000)
	minerTip := new(uint256.Int).SetBytes(new(big.Int).Mul(MINERTIP, calcEtxFeeMultiplier(fromAddr, cyprus2Addr)).Bytes())
	baseFee := new(uint256.Int).SetBytes(new(big.Int).Mul(MAXFEE, calcEtxFeeMultiplier(fromAddr, cyprus2Addr)).Bytes())
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = from.Bytes32()
	data = append(data, temp[:]...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)
	temp = tokenId.Bytes32()
	data = append(data, temp[:]...)
	temp = gasLimit.Bytes32()
	data = append(data, temp[:]...)
	temp = minerTip.Bytes32()
	data = append(data, temp[:]...)
	temp = baseFee.Bytes32()
	data = append(data, temp[:]...)
	// Value sent in the transaction to the contract is (ETX minerTip + ETX baseFee) * gasLimit
	value := minerTip.Add(minerTip, baseFee).Mul(minerTip, gasLimit)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce + 2, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &contractAddr, Value: value.ToBig(), Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(90 * time.Second) // wait for 1 region block in cyprus 1 and 1 region block in cyprus 2 (plus zone blocks)
	// Check balance in zone 0-1
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)

	data, err = cyprus2Client.CallContract(context.Background(), interfaces.CallMsg{From: cyprus2Addr, To: &cyprus2ContractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of cyprus2Addr in zone 0-1: " + balance.String())

	// Check ownerOf tokenId
	sig = crypto.Keccak256([]byte("ownerOf(uint256)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = tokenId.Bytes32()
	data = append(data, temp[:]...)
	data2, err = cyprus2Client.CallContract(context.Background(), interfaces.CallMsg{From: cyprus2Addr, To: &cyprus2ContractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())

	}
	fmt.Println("Owner of tokenId " + tokenId.Dec() + " in zone 0-1: " + common.BytesToAddress(data2).Hex())

	data2, err = client.CallContract(context.Background(), interfaces.CallMsg{From: fromAddr, To: &contractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())

	}
	fmt.Println("Owner of tokenId " + tokenId.Dec() + " in zone 0-0: " + common.BytesToAddress(data2).Hex())

	// Check balance in zone 0-0
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	from, err = uint256.FromHex(fromAddr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	temp = from.Bytes32()
	data = append(data, temp[:]...)

	data, err = client.CallContract(context.Background(), interfaces.CallMsg{From: fromAddr, To: &contractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of fromAddr in zone 0-0: " + balance.String())

	to, err = uint256.FromHex(address)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	cyprus2From, err := uint256.FromHex(cyprus2Addr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	tokenId = uint256.NewInt(0)
	sig = crypto.Keccak256([]byte("transferFrom(address,address,uint256)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = cyprus2From.Bytes32()
	data = append(data, temp[:]...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)
	temp = tokenId.Bytes32()
	data = append(data, temp[:]...)

	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: cyprus2Nonce + 2, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &cyprus2ContractAddr, Value: common.Big0, Data: data}

	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, cyprus2PrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = cyprus2Client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	time.Sleep(20 * time.Second) // wait for 1 zone block
	// Check balance in zone 0-0
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)

	data, err = cyprus2Client.CallContract(context.Background(), interfaces.CallMsg{From: fromAddr, To: &cyprus2ContractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of " + to.Hex() + " in zone 0-1: " + balance.String())
	fmt.Println("Contract address: " + contractAddr.Hex())
	fmt.Println("Cyprus 2 contract address: " + cyprus2ContractAddr.Hex())

}

func ExternalTokenTransfer_(wallets map[string][]wallet, address string) {
	// ERC20X.sol Contract bytecode
	binary := "60806040523480156200001157600080fd5b506040518060400160405280601681526020017f517561692043726f73732d436861696e20546f6b656e00000000000000000000815250600f908162000058919062000970565b506040518060400160405280600381526020017f5158430000000000000000000000000000000000000000000000000000000000815250601090816200009f919062000970565b5033601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea00000600e8190555062000127601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e546200057f60201b60201c565b6040518060400160405280600060ff168152602001601d60ff1681525060126000600d81106200015c576200015b62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280601e60ff168152602001603a60ff1681525060126001600d8110620001d757620001d662000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280603b60ff168152602001605760ff1681525060126002600d811062000252576200025162000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280605860ff168152602001607360ff1681525060126003600d8110620002cd57620002cc62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280607460ff168152602001608f60ff1681525060126004600d811062000348576200034762000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280609060ff16815260200160ab60ff1681525060126005600d8110620003c357620003c262000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060ac60ff16815260200160c760ff1681525060126006600d81106200043e576200043d62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060c860ff16815260200160e360ff1681525060126007600d8110620004b957620004b862000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060e460ff16815260200160ff801681525060126008600d811062000533576200053262000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555090505062000ba1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620005f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005e89062000ae7565b60405180910390fd5b6200060560008383620006ec60201b60201c565b80600e600082825462000619919062000b38565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620006cc919062000b84565b60405180910390a3620006e860008383620006f160201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200077857607f821691505b6020821081036200078e576200078d62000730565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007b9565b620008048683620007b9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620008516200084b62000845846200081c565b62000826565b6200081c565b9050919050565b6000819050919050565b6200086d8362000830565b620008856200087c8262000858565b848454620007c6565b825550505050565b600090565b6200089c6200088d565b620008a981848462000862565b505050565b5b81811015620008d157620008c560008262000892565b600181019050620008af565b5050565b601f8211156200092057620008ea8162000794565b620008f584620007a9565b8101602085101562000905578190505b6200091d6200091485620007a9565b830182620008ae565b50505b505050565b600082821c905092915050565b6000620009456000198460080262000925565b1980831691505092915050565b600062000960838362000932565b9150826002028217905092915050565b6200097b82620006f6565b67ffffffffffffffff81111562000997576200099662000701565b5b620009a382546200075f565b620009b0828285620008d5565b600060209050601f831160018114620009e85760008415620009d3578287015190505b620009df858262000952565b86555062000a4f565b601f198416620009f88662000794565b60005b8281101562000a2257848901518255600182019150602085019450602081019050620009fb565b8683101562000a42578489015162000a3e601f89168262000932565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000acf601f8362000a86565b915062000adc8262000a97565b602082019050919050565b6000602082019050818103600083015262000b028162000ac0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000b45826200081c565b915062000b52836200081c565b925082820190508082111562000b6d5762000b6c62000b09565b5b92915050565b62000b7e816200081c565b82525050565b600060208201905062000b9b600083018462000b73565b92915050565b612c2b8062000bb16000396000f3fe6080604052600436106101095760003560e01c8063593b79fe11610095578063a457c2d711610064578063a457c2d7146103ab578063a9059cbb146103e8578063bc472aa314610418578063dd62ed3e14610455578063e20e50ba1461049257610109565b8063593b79fe146102ea57806370a082311461032757806373cddab21461036457806395d89b411461038057610109565b806323b872dd116100dc57806323b872dd146101ca578063313ce567146102075780633950935114610232578063399444bc1461026f578063429437bf146102ac57610109565b806306fdde031461010e578063095ea7b31461013957806318160ddd1461017657806320e8dd93146101a1575b600080fd5b34801561011a57600080fd5b506101236104bb565b604051610130919061197c565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190611a37565b61054d565b60405161016d9190611a92565b60405180910390f35b34801561018257600080fd5b5061018b610564565b6040516101989190611abc565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190611a37565b61056e565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190611ad7565b61066c565b6040516101fe9190611a92565b60405180910390f35b34801561021357600080fd5b5061021c61068f565b6040516102299190611b46565b60405180910390f35b34801561023e57600080fd5b5061025960048036038101906102549190611a37565b610698565b6040516102669190611a92565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190611b61565b6106c8565b6040516102a39190611b46565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190611b8e565b6107d5565b6040516102e1929190611bbb565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190611b61565b610816565b60405161031e9190611c39565b60405180910390f35b34801561033357600080fd5b5061034e60048036038101906103499190611b61565b61083f565b60405161035b9190611abc565b60405180910390f35b61037e60048036038101906103799190611c5b565b610887565b005b34801561038c57600080fd5b50610395610b30565b6040516103a2919061197c565b60405180910390f35b3480156103b757600080fd5b506103d260048036038101906103cd9190611a37565b610bc2565b6040516103df9190611a92565b60405180910390f35b61040260048036038101906103fd9190611a37565b610c32565b60405161040f9190611a92565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190611b8e565b610c8f565b60405161044c9190611ce5565b60405180910390f35b34801561046157600080fd5b5061047c60048036038101906104779190611d00565b610cc5565b6040516104899190611abc565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b49190611d6c565b610d4c565b005b6060600f80546104ca90611ddb565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690611ddb565b80156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b5050505050905090565b600061055a338484610f6c565b6001905092915050565b6000600e54905090565b3373ffffffffffffffffffffffffffffffffffffffff166002610590336106c8565b60ff16600c81106105a4576105a3611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614336040516020016105ee9190611e83565b60405160208183030381529060405260405160200161060d9190611f7d565b6040516020818303038152906040529061065d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610654919061197c565b60405180910390fd5b506106688282611135565b5050565b600061067984338461128b565b610684848484611317565b600190509392505050565b60006012905090565b6000803390506106bd8185856106ae8589610cc5565b6106b89190611fd9565b610f6c565b600191505092915050565b6000806106d483610816565b6000815181106106e7576106e6611e0c565b5b602001015160f81c60f81b60f81c905060005b60098160ff1610156107945760128160ff16600d811061071d5761071c611e0c565b5b0160000160009054906101000a900460ff1660ff168260ff1610158015610772575060128160ff16600d811061075657610755611e0c565b5b0160000160019054906101000a900460ff1660ff168260ff1611155b156107815780925050506107d0565b808061078c9061200d565b9150506106fa565b506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c790612082565b60405180910390fd5b919050565b601281600d81106107e557600080fd5b016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6060816040516020016108299190611e83565b6040516020818303038152906040529050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600085f7905080156108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c5906120ee565b60405180910390fd5b6108d8338661158d565b600060026108e5886106c8565b60ff16600c81106108f9576108f8611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390612180565b60405180910390fd5b600085858561099b9190611fd9565b6109a591906121a0565b9050803410156109b48261175a565b6040516020016109c491906122d1565b60405160208183030381529060405290610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b919061197c565b60405180910390fd5b5060008888604051602401610a2a9291906122fe565b6040516020818303038152906040527f20e8dd93000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000835160208501898b8d60008b6000f690508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcf0ee562475620bbcd2f1b0675c8163317513271e4fdbbe9722436f247bd6d998b604051610b1c9190611abc565b60405180910390a350505050505050505050565b606060108054610b3f90611ddb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90611ddb565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b5050505050905090565b6000803390506000610bd48286610cc5565b905083811015610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1090612399565b60405180910390fd5b610c268286868403610f6c565b60019250505092915050565b60008083f7905080610c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c709061242b565b60405180910390fd5b610c84338585611317565b600191505092915050565b600281600c8110610c9f57600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081f790508015610d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8a906120ee565b60405180910390fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90612497565b60405180910390fd5b60098360ff1610610e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6090612503565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660028460ff16600c8110610e9857610e97611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790612595565b60405180910390fd5b8160028460ff16600c8110610f2857610f27611e0c565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd290612627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361104a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611041906126b9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111289190611abc565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612725565b60405180910390fd5b6111b0600083836118e2565b80600e60008282546111c29190611fd9565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112739190611abc565b60405180910390a3611287600083836118e7565b5050565b60006112978484610cc5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146113115781811015611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612791565b60405180910390fd5b6113108484848403610f6c565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90612823565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ec906128b5565b60405180910390fd5b6114008383836118e2565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147d90612947565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115749190611abc565b60405180910390a36115878484846118e7565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f3906129d9565b60405180910390fd5b611608826000836118e2565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590612a6b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600e60008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117419190611abc565b60405180910390a3611755836000846118e7565b505050565b6060600082036117a1576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506118dd565b600082905060005b600082146117d35780806117bc90612a8b565b915050600a826117cc9190612b02565b91506117a9565b60008167ffffffffffffffff8111156117ef576117ee612b33565b5b6040519080825280601f01601f1916602001820160405280156118215781602001600182028036833780820191505090505b50905060008290505b600086146118d55760018161183f9190612b62565b90506000600a80886118519190612b02565b61185b91906121a0565b876118669190612b62565b60306118729190612b96565b905060008160f81b9050808484815181106118905761188f611e0c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886118cc9190612b02565b9750505061182a565b819450505050505b919050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561192657808201518184015260208101905061190b565b60008484015250505050565b6000601f19601f8301169050919050565b600061194e826118ec565b61195881856118f7565b9350611968818560208601611908565b61197181611932565b840191505092915050565b600060208201905081810360008301526119968184611943565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119ce826119a3565b9050919050565b6119de816119c3565b81146119e957600080fd5b50565b6000813590506119fb816119d5565b92915050565b6000819050919050565b611a1481611a01565b8114611a1f57600080fd5b50565b600081359050611a3181611a0b565b92915050565b60008060408385031215611a4e57611a4d61199e565b5b6000611a5c858286016119ec565b9250506020611a6d85828601611a22565b9150509250929050565b60008115159050919050565b611a8c81611a77565b82525050565b6000602082019050611aa76000830184611a83565b92915050565b611ab681611a01565b82525050565b6000602082019050611ad16000830184611aad565b92915050565b600080600060608486031215611af057611aef61199e565b5b6000611afe868287016119ec565b9350506020611b0f868287016119ec565b9250506040611b2086828701611a22565b9150509250925092565b600060ff82169050919050565b611b4081611b2a565b82525050565b6000602082019050611b5b6000830184611b37565b92915050565b600060208284031215611b7757611b7661199e565b5b6000611b85848285016119ec565b91505092915050565b600060208284031215611ba457611ba361199e565b5b6000611bb284828501611a22565b91505092915050565b6000604082019050611bd06000830185611b37565b611bdd6020830184611b37565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000611c0b82611be4565b611c158185611bef565b9350611c25818560208601611908565b611c2e81611932565b840191505092915050565b60006020820190508181036000830152611c538184611c00565b905092915050565b600080600080600060a08688031215611c7757611c7661199e565b5b6000611c85888289016119ec565b9550506020611c9688828901611a22565b9450506040611ca788828901611a22565b9350506060611cb888828901611a22565b9250506080611cc988828901611a22565b9150509295509295909350565b611cdf816119c3565b82525050565b6000602082019050611cfa6000830184611cd6565b92915050565b60008060408385031215611d1757611d1661199e565b5b6000611d25858286016119ec565b9250506020611d36858286016119ec565b9150509250929050565b611d4981611b2a565b8114611d5457600080fd5b50565b600081359050611d6681611d40565b92915050565b60008060408385031215611d8357611d8261199e565b5b6000611d9185828601611d57565b9250506020611da2858286016119ec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611df357607f821691505b602082108103611e0657611e05611dac565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b6000611e5382611e3b565b9050919050565b6000611e6582611e48565b9050919050565b611e7d611e78826119c3565b611e5a565b82525050565b6000611e8f8284611e6c565b60148201915081905092915050565b600081905092915050565b7f53656e6465722000000000000000000000000000000000000000000000000000600082015250565b6000611edf600783611e9e565b9150611eea82611ea9565b600782019050919050565b600081905092915050565b6000611f0b82611be4565b611f158185611ef5565b9350611f25818560208601611908565b80840191505092915050565b7f206e6f7420617070726f76656400000000000000000000000000000000000000600082015250565b6000611f67600d83611e9e565b9150611f7282611f31565b600d82019050919050565b6000611f8882611ed2565b9150611f948284611f00565b9150611f9f82611f5a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fe482611a01565b9150611fef83611a01565b925082820190508082111561200757612006611faa565b5b92915050565b600061201882611b2a565b915060ff820361202b5761202a611faa565b5b600182019050919050565b7f496e76616c6964204c6f636174696f6e00000000000000000000000000000000600082015250565b600061206c6010836118f7565b915061207782612036565b602082019050919050565b6000602082019050818103600083015261209b8161205f565b9050919050565b7f41646472657373206973206e6f742065787465726e616c000000000000000000600082015250565b60006120d86017836118f7565b91506120e3826120a2565b602082019050919050565b60006020820190508181036000830152612107816120cb565b9050919050565b7f546f6b656e206973206e6f7420617661696c61626c65206f6e2074686520646560008201527f7374696e6174696f6e20636861696e0000000000000000000000000000000000602082015250565b600061216a602f836118f7565b91506121758261210e565b604082019050919050565b600060208201905081810360008301526121998161215d565b9050919050565b60006121ab82611a01565b91506121b683611a01565b92508282026121c481611a01565b915082820484148315176121db576121da611faa565b5b5092915050565b7f4e6f7420656e6f756768206761732073656e742c206e656564206174206c656160008201527f7374200000000000000000000000000000000000000000000000000000000000602082015250565b600061223e602383611e9e565b9150612249826121e2565b602382019050919050565b600061225f826118ec565b6122698185611e9e565b9350612279818560208601611908565b80840191505092915050565b7f2077656900000000000000000000000000000000000000000000000000000000600082015250565b60006122bb600483611e9e565b91506122c682612285565b600482019050919050565b60006122dc82612231565b91506122e88284612254565b91506122f3826122ae565b915081905092915050565b60006040820190506123136000830185611cd6565b6123206020830184611aad565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006123836025836118f7565b915061238e82612327565b604082019050919050565b600060208201905081810360008301526123b281612376565b9050919050565b7f416464726573732069732065787465726e616c2e205573652063726f73732d6360008201527f6861696e207472616e736665722066756e6374696f6e2e000000000000000000602082015250565b60006124156037836118f7565b9150612420826123b9565b604082019050919050565b6000602082019050818103600083015261244481612408565b9050919050565b7f53656e646572206973206e6f74206465706c6f79657200000000000000000000600082015250565b60006124816016836118f7565b915061248c8261244b565b602082019050919050565b600060208201905081810360008301526124b081612474565b9050919050565b7f4d61782039207a6f6e6573000000000000000000000000000000000000000000600082015250565b60006124ed600b836118f7565b91506124f8826124b7565b602082019050919050565b6000602082019050818103600083015261251c816124e0565b9050919050565b7f54686520617070726f766564206164647265737320666f722074686973207a6f60008201527f6e6520616c726561647920657869737473000000000000000000000000000000602082015250565b600061257f6031836118f7565b915061258a82612523565b604082019050919050565b600060208201905081810360008301526125ae81612572565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006126116024836118f7565b915061261c826125b5565b604082019050919050565b6000602082019050818103600083015261264081612604565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006126a36022836118f7565b91506126ae82612647565b604082019050919050565b600060208201905081810360008301526126d281612696565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061270f601f836118f7565b915061271a826126d9565b602082019050919050565b6000602082019050818103600083015261273e81612702565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061277b601d836118f7565b915061278682612745565b602082019050919050565b600060208201905081810360008301526127aa8161276e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061280d6025836118f7565b9150612818826127b1565b604082019050919050565b6000602082019050818103600083015261283c81612800565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061289f6023836118f7565b91506128aa82612843565b604082019050919050565b600060208201905081810360008301526128ce81612892565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006129316026836118f7565b915061293c826128d5565b604082019050919050565b6000602082019050818103600083015261296081612924565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006129c36021836118f7565b91506129ce82612967565b604082019050919050565b600060208201905081810360008301526129f2816129b6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a556022836118f7565b9150612a60826129f9565b604082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b6000612a9682611a01565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ac857612ac7611faa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b0d82611a01565b9150612b1883611a01565b925082612b2857612b27612ad3565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612b6d82611a01565b9150612b7883611a01565b9250828203905081811115612b9057612b8f611faa565b5b92915050565b6000612ba182611b2a565b9150612bac83611b2a565b9250828201905060ff811115612bc557612bc4611faa565b5b9291505056fea2646970667358221220ab6a75e621933d75fcdb9dabdd7f9d2f85f1e994467ae8097a6ea39b07286ca864736f6c63782c302e382e31382d646576656c6f702e323032322e31312e382b636f6d6d69742e36306161353861362e6d6f64005d"

	config, err := util.LoadConfig(".")
	if err != nil {
		fmt.Println("cannot load config: " + err.Error())
		return
	}
	allClients := getNodeClients(config)
	region := 0
	from_zone := 0
	if !allClients.zonesAvailable[region][from_zone] {
		return
	}
	client := allClients.zoneClients[region][from_zone] // cyprus 1 node client
	signer := types.LatestSigner(PARAMS)
	zoneWallets := wallets["zone-"+fmt.Sprintf("%d-%d", region, from_zone)] // get wallet from file
	fromAddr := common.HexToAddress(zoneWallets[0].Address)
	fromPrivKey, err := crypto.ToECDSA(common.FromHex(zoneWallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	common.NodeLocation = *fromAddr.Location()
	nonce, err := client.PendingNonceAt(context.Background(), fromAddr)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddr, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s\n", fromAddr.String(), balance.String())
	// Deploy QXC contract with the proper address that gives me tokens in zone 0-0
	contract, err := hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i := uint8(0)
	contract = append(contract, i)
	var contractAddr common.Address
	// Grind contract address
	for {
		contract[len(contract)-1] = i
		contractAddr = crypto.CreateAddress(fromAddr, nonce, contract)
		if common.IsInChainScope(contractAddr.Bytes()) {
			break
		}
		i++
	}
	// Construct deployment tx
	inner_tx := types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)                                                  // Wait for it to be mined
	cyprus2Client := allClients.zoneClients[region][from_zone+1]                 // cyprus 2 node client
	cyprus2Wallets := wallets["zone-"+fmt.Sprintf("%d-%d", region, from_zone+1)] // get cyprus2 wallet from file
	cyprus2Addr := common.HexToAddress(cyprus2Wallets[0].Address)
	cyprus2PrivKey, err := crypto.ToECDSA(common.FromHex(cyprus2Wallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	common.NodeLocation = *cyprus2Addr.Location()
	cyprus2Nonce, err := cyprus2Client.PendingNonceAt(context.Background(), cyprus2Addr)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Deploy QXC contract with the proper address that gives me tokens in zone 0-1
	contract, err = hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i = uint8(0)
	contract = append(contract, i)
	var cyprus2ContractAddr common.Address
	// Grind contract address
	for {
		contract[len(contract)-1] = i
		cyprus2ContractAddr = crypto.CreateAddress(cyprus2Addr, cyprus2Nonce, contract)
		if common.IsInChainScope(cyprus2ContractAddr.Bytes()) {
			break
		}
		i++
	}
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: cyprus2Nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, cyprus2PrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = cyprus2Client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Here, set contractAddr as an approved contract for zone 0-0 (chain 0) in zone 0-1
	sig := crypto.Keccak256([]byte("AddApprovedAddress(uint8,address)"))[:4]
	chain := uint256.NewInt(0)
	approvedAddress := new(uint256.Int).SetBytes(contractAddr.Bytes())
	data := make([]byte, 0, 0)
	data = append(data, sig...)
	temp := chain.Bytes32()
	data = append(data, temp[:]...)
	temp = approvedAddress.Bytes32()
	data = append(data, temp[:]...)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: cyprus2Nonce + 1, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &cyprus2ContractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, cyprus2PrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = cyprus2Client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Here, set cyprus2ContractAddr as an approved contract for zone 0-1 (chain 1) in zone 0-0
	sig = crypto.Keccak256([]byte("AddApprovedAddress(uint8,address)"))[:4]
	chain = uint256.NewInt(1)
	approvedAddress = new(uint256.Int).SetBytes(cyprus2ContractAddr.Bytes())
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = chain.Bytes32()
	data = append(data, temp[:]...)
	temp = approvedAddress.Bytes32()
	data = append(data, temp[:]...)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce + 1, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &contractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Transfer 1 token from my address in zone 0-0 (cyprus 1) to zone 0-1 (cyprus 2)
	sig = crypto.Keccak256([]byte("crossChainTransfer(address,uint256,uint256,uint256,uint256)"))[:4] // crossChainTransfer(address to, uint256 amount, uint256 gasLimit, uint256 minerTip, uint256 baseFee)
	to, err := uint256.FromHex(cyprus2Addr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	amount := uint256.NewInt(1)
	gasLimit := uint256.NewInt(1000000)
	minerTip := new(uint256.Int).SetBytes(new(big.Int).Mul(MINERTIP, calcEtxFeeMultiplier(fromAddr, cyprus2Addr)).Bytes())
	baseFee := new(uint256.Int).SetBytes(new(big.Int).Mul(MAXFEE, calcEtxFeeMultiplier(fromAddr, cyprus2Addr)).Bytes())
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)
	temp = amount.Bytes32()
	data = append(data, temp[:]...)
	temp = gasLimit.Bytes32()
	data = append(data, temp[:]...)
	temp = minerTip.Bytes32()
	data = append(data, temp[:]...)
	temp = baseFee.Bytes32()
	data = append(data, temp[:]...)
	// Value sent in the transaction to the contract is (ETX minerTip + ETX baseFee) * gasLimit
	value := minerTip.Add(minerTip, baseFee).Mul(minerTip, gasLimit)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce + 2, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &contractAddr, Value: value.ToBig(), Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(90 * time.Second) // wait for 1 region block in cyprus 1 and 1 region block in cyprus 2 (plus zone blocks)
	// Check balance in zone 0-1
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)

	data, err = cyprus2Client.CallContract(context.Background(), interfaces.CallMsg{From: cyprus2Addr, To: &cyprus2ContractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of cyprus2Addr in zone 0-1: " + balance.String())
	// Check balance in zone 0-0
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	from, err := uint256.FromHex(fromAddr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	temp = from.Bytes32()
	data = append(data, temp[:]...)

	data, err = client.CallContract(context.Background(), interfaces.CallMsg{From: fromAddr, To: &contractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of fromAddr in zone 0-0: " + balance.String())

	to, err = uint256.FromHex(address)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	amount = uint256.NewInt(10e18)
	sig = crypto.Keccak256([]byte("transfer(address,uint256)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)
	temp = amount.Bytes32()
	data = append(data, temp[:]...)

	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce + 3, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &contractAddr, Value: common.Big0, Data: data}

	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	time.Sleep(20 * time.Second) // wait for 1 zone block
	// Check balance in zone 0-0
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)

	data, err = client.CallContract(context.Background(), interfaces.CallMsg{From: fromAddr, To: &contractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of " + to.Hex() + " in zone 0-0: " + balance.String())
	fmt.Println("Contract address: " + contractAddr.Hex())
	fmt.Println("Cyprus 2 contract address: " + cyprus2ContractAddr.Hex())
}

func SendMulticall(wallets map[string][]wallet, region int, from_zone int) {
	binary := "608060405234801561001057600080fd5b50610ee0806100206000396000f3fe6080604052600436106100f35760003560e01c80634d2301cc1161008a578063a8b0574e11610059578063a8b0574e1461025a578063bce38bd714610275578063c3077fa914610288578063ee82ac5e1461029b57600080fd5b80634d2301cc146101ec57806372425d9d1461022157806382ad56cb1461023457806386d516e81461024757600080fd5b80633408e470116100c65780633408e47014610191578063399542e9146101a45780633e64a696146101c657806342cbb15c146101d957600080fd5b80630f28c97d146100f8578063174dea711461011a578063252dba421461013a57806327e86d6e1461015b575b600080fd5b34801561010457600080fd5b50425b6040519081526020015b60405180910390f35b61012d610128366004610a85565b6102ba565b6040516101119190610bbe565b61014d610148366004610a85565b6104ef565b604051610111929190610bd8565b34801561016757600080fd5b50437fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0140610107565b34801561019d57600080fd5b5046610107565b6101b76101b2366004610c60565b610690565b60405161011193929190610cba565b3480156101d257600080fd5b5048610107565b3480156101e557600080fd5b5043610107565b3480156101f857600080fd5b50610107610207366004610ce2565b73ffffffffffffffffffffffffffffffffffffffff163190565b34801561022d57600080fd5b5044610107565b61012d610242366004610a85565b6106ab565b34801561025357600080fd5b5045610107565b34801561026657600080fd5b50604051418152602001610111565b61012d610283366004610c60565b61085a565b6101b7610296366004610a85565b610a1a565b3480156102a757600080fd5b506101076102b6366004610d18565b4090565b60606000828067ffffffffffffffff8111156102d8576102d8610d31565b60405190808252806020026020018201604052801561031e57816020015b6040805180820190915260008152606060208201528152602001906001900390816102f65790505b5092503660005b8281101561047757600085828151811061034157610341610d60565b6020026020010151905087878381811061035d5761035d610d60565b905060200281019061036f9190610d8f565b6040810135958601959093506103886020850185610ce2565b73ffffffffffffffffffffffffffffffffffffffff16816103ac6060870187610dcd565b6040516103ba929190610e32565b60006040518083038185875af1925050503d80600081146103f7576040519150601f19603f3d011682016040523d82523d6000602084013e6103fc565b606091505b50602080850191909152901515808452908501351761046d577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b5050600101610325565b508234146104e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d6174636800000000000060448201526064015b60405180910390fd5b50505092915050565b436060828067ffffffffffffffff81111561050c5761050c610d31565b60405190808252806020026020018201604052801561053f57816020015b606081526020019060019003908161052a5790505b5091503660005b8281101561068657600087878381811061056257610562610d60565b90506020028101906105749190610e42565b92506105836020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166105a66020850185610dcd565b6040516105b4929190610e32565b6000604051808303816000865af19150503d80600081146105f1576040519150601f19603f3d011682016040523d82523d6000602084013e6105f6565b606091505b5086848151811061060957610609610d60565b602090810291909101015290508061067d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b50600101610546565b5050509250929050565b43804060606106a086868661085a565b905093509350939050565b6060818067ffffffffffffffff8111156106c7576106c7610d31565b60405190808252806020026020018201604052801561070d57816020015b6040805180820190915260008152606060208201528152602001906001900390816106e55790505b5091503660005b828110156104e657600084828151811061073057610730610d60565b6020026020010151905086868381811061074c5761074c610d60565b905060200281019061075e9190610e76565b925061076d6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff166107906040850185610dcd565b60405161079e929190610e32565b6000604051808303816000865af19150503d80600081146107db576040519150601f19603f3d011682016040523d82523d6000602084013e6107e0565b606091505b506020808401919091529015158083529084013517610851577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b50600101610714565b6060818067ffffffffffffffff81111561087657610876610d31565b6040519080825280602002602001820160405280156108bc57816020015b6040805180820190915260008152606060208201528152602001906001900390816108945790505b5091503660005b82811015610a105760008482815181106108df576108df610d60565b602002602001015190508686838181106108fb576108fb610d60565b905060200281019061090d9190610e42565b925061091c6020840184610ce2565b73ffffffffffffffffffffffffffffffffffffffff1661093f6020850185610dcd565b60405161094d929190610e32565b6000604051808303816000865af19150503d806000811461098a576040519150601f19603f3d011682016040523d82523d6000602084013e61098f565b606091505b506020830152151581528715610a07578051610a07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060448201526064016104dd565b506001016108c3565b5050509392505050565b6000806060610a2b60018686610690565b919790965090945092505050565b60008083601f840112610a4b57600080fd5b50813567ffffffffffffffff811115610a6357600080fd5b6020830191508360208260051b8501011115610a7e57600080fd5b9250929050565b60008060208385031215610a9857600080fd5b823567ffffffffffffffff811115610aaf57600080fd5b610abb85828601610a39565b90969095509350505050565b6000815180845260005b81811015610aed57602081850181015186830182015201610ad1565b81811115610aff576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600082825180855260208086019550808260051b84010181860160005b84811015610bb1578583037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001895281518051151584528401516040858501819052610b9d81860183610ac7565b9a86019a9450505090830190600101610b4f565b5090979650505050505050565b602081526000610bd16020830184610b32565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610c52577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0888703018452610c40868351610ac7565b95509284019290840190600101610c06565b509398975050505050505050565b600080600060408486031215610c7557600080fd5b83358015158114610c8557600080fd5b9250602084013567ffffffffffffffff811115610ca157600080fd5b610cad86828701610a39565b9497909650939450505050565b838152826020820152606060408201526000610cd96060830184610b32565b95945050505050565b600060208284031215610cf457600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610bd157600080fd5b600060208284031215610d2a57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81833603018112610dc357600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e0257600080fd5b83018035915067ffffffffffffffff821115610e1d57600080fd5b602001915036819003821315610a7e57600080fd5b8183823760009101908152919050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112610dc357600080fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa1833603018112610dc357600080fdfea2646970667358221220bb2b5c71a328032f97c676ae39a1ec2148d3e5d6f73d95e9b17910152d61f16264736f6c634300080c0033"

	config, err := util.LoadConfig(".")
	if err != nil {
		fmt.Println("cannot load config: " + err.Error())
		return
	}
	allClients := getNodeClients(config)
	if !allClients.zonesAvailable[region][from_zone] {
		return
	}
	client := allClients.zoneClients[region][from_zone] // cyprus 1 node client
	signer := types.LatestSigner(PARAMS)
	zoneWallets := wallets["zone-"+fmt.Sprintf("%d-%d", region, from_zone)] // get wallet from file
	fromAddr := common.HexToAddress(zoneWallets[0].Address)
	fromPrivKey, err := crypto.ToECDSA(common.FromHex(zoneWallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	common.NodeLocation = *fromAddr.Location()
	nonce, err := client.PendingNonceAt(context.Background(), fromAddr)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddr, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s\n", fromAddr.String(), balance.String())
	// Deploy QXC contract with the proper address that gives me tokens in zone 0-0
	contract, err := hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i := uint8(0)
	contract = append(contract, i)
	var contractAddr common.Address
	// Grind contract address
	for {
		contract[len(contract)-1] = i
		contractAddr = crypto.CreateAddress(fromAddr, nonce, contract)
		if common.IsInChainScope(contractAddr.Bytes()) {
			break
		}
		i++
	}

	inner_tx := types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("zone-" + fmt.Sprintf("%d-%d", region, from_zone) + " contract deployed: " + contractAddr.String())
}

func SendQuai(wallets map[string][]wallet, address string) {
	config, err := util.LoadConfig(".")
	if err != nil {
		fmt.Println("cannot load config: " + err.Error())
		return
	}
	allClients := getNodeClients(config)
	region := 0
	from_zone := 0
	if !allClients.zonesAvailable[region][from_zone] {
		return
	}
	client := allClients.zoneClients[region][from_zone] // cyprus 1 node client
	signer := types.LatestSigner(PARAMS)
	chainId, err := client.ChainID(context.Background())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("chain id: " + chainId.String())
	zoneWallets := wallets["zone-"+fmt.Sprintf("%d-%d", region, from_zone)] // get wallet from file
	fromAddr := common.HexToAddress(zoneWallets[10].Address)
	fromPrivKey, err := crypto.ToECDSA(common.FromHex(zoneWallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	common.NodeLocation = *fromAddr.Location()
	nonce, err := client.PendingNonceAt(context.Background(), fromAddr)
	fmt.Println("nonce: " + fmt.Sprint(nonce))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddr, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	to := common.HexToAddress(address)
	fmt.Printf("Balance of %s: %s\n", fromAddr.String(), balance.String())
	var tx *types.Transaction
	var etx *types.Transaction
	if to.Location().Name() != fromAddr.Location().Name() {
		internal_to_external_tx := types.InternalToExternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: &to, Value: big.NewInt(9000000000000000000), Data: nil, ETXGasLimit: 21000, ETXGasPrice: new(big.Int).Mul(MAXFEE, calcEtxFeeMultiplier(fromAddr, to)), ETXGasTip: new(big.Int).Mul(MINERTIP, calcEtxFeeMultiplier(fromAddr, to))}
		tx, err = types.SignTx(types.NewTx(&internal_to_external_tx), signer, fromPrivKey)
		etxInner := types.ExternalTx{Value: tx.Value(), To: tx.To(), Sender: fromAddr, GasTipCap: tx.ETXGasTip(), GasFeeCap: tx.ETXGasPrice(), Gas: tx.ETXGasLimit(), Data: tx.Data(), AccessList: tx.ETXAccessList(), Nonce: tx.Nonce(), ChainID: tx.ChainId()}
		fmt.Println(types.NewTx(&etxInner).Hash().String())
		etx = types.NewTx(&etxInner)
	} else {
		inner_tx := types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: &to, Value: big.NewInt(9200000000000000000), Data: nil}
		tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println(tx.Hash().String())
	time.Sleep(10 * time.Second)
	if to.Location().Name() != fromAddr.Location().Name() {
		cyprus2Client := allClients.zoneClients[region][from_zone+1] // cyprus 2 node client
		balance, err = cyprus2Client.BalanceAt(context.Background(), to, nil)
		fmt.Printf("Current balance of %s: %s\n", to.String(), balance.String())
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		time.Sleep(120 * time.Second)
		balance, err = cyprus2Client.BalanceAt(context.Background(), to, nil)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		fmt.Printf("New balance of %s: %s\n", to.String(), balance.String())
		receipt, err := cyprus2Client.TransactionReceipt(context.Background(), etx.Hash())
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		fmt.Printf("%+v\n", *receipt)
	} else {
		balance, err = client.BalanceAt(context.Background(), to, nil)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		fmt.Printf("Balance of %s: %s\n", to.String(), balance.String())
	}

}

func BadTransactions(wallets map[string][]wallet, group string) {

}

func TestAddressLocation(t *testing.T) {
	addr := common.HexToAddress("0x1234567890123456789012345678901234567890")
	t.Log(addr.Location().Name())
}

// Emitted ETXs must include some multiple of BaseFee as miner tip, to
// encourage processing at the destination.
func calcEtxFeeMultiplier(fromAddr, toAddr common.Address) *big.Int {
	confirmationCtx := fromAddr.Location().CommonDom(*toAddr.Location()).Context()
	multiplier := big.NewInt(common.NumZonesInRegion)
	if confirmationCtx == common.PRIME_CTX {
		multiplier = big.NewInt(0).Mul(multiplier, big.NewInt(common.NumRegionsInPrime))
	}
	return multiplier
}

func TestTxStringBytesToDeserializedTx() {
	bytes := "02f87f82232809850218711a00850430e2340082a4109421fda31d5df101b456a953f3941d26448c6b382e0180c0850218711a00850430e2340082a41080c001a0fd22734b7d06e1696a3c81ae773e60ec3642658e408bb7893b0b05fd89893395a021cba9b8c447ee9bc30d5f51c4c1a70848f4a988268970cb80be10e891a44285"
	data, err := hex.DecodeString(bytes)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	tx, err := DeserializeTx(data)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println(tx)
}

func DeserializeTx(data []byte) (*types.Transaction, error) {
	var tx types.Transaction
	err := rlp.DecodeBytes(data, &tx)
	if err != nil {
		return nil, err
	}
	return &tx, nil
}
