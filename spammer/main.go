package main

import (
	"context"
	"crypto/ecdsa"
	"crypto/rand"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math/big"
	random "math/rand"
	"os"
	"path/filepath"
	"time"

	interfaces "github.com/dominant-strategies/go-quai"
	"github.com/dominant-strategies/go-quai/common"
	"github.com/dominant-strategies/go-quai/core"
	"github.com/dominant-strategies/go-quai/core/types"
	"github.com/dominant-strategies/go-quai/crypto"
	"github.com/dominant-strategies/go-quai/params"
	"github.com/dominant-strategies/go-quai/quaiclient/ethclient"
	accounts "github.com/dominant-strategies/quai-accounts"
	"github.com/dominant-strategies/quai-accounts/keystore"
	"github.com/dominant-strategies/tx-spammer/util"
	"github.com/holiman/uint256"
	"github.com/sasha-s/go-deadlock"
)

var (
	MAXFEE   = big.NewInt(8 * params.GWei)
	MINERTIP = big.NewInt(4 * params.GWei)
	GAS      = uint64(21000)
	VALUE    = big.NewInt(1)
	// Change the params to the proper chain config
	PARAMS             = params.Blake3PowLocalChainConfig
	WALLETSPERBLOCK    = 160
	NUMZONES           = 3
	enableSleepPerTx   = true
	startingSleepPerTx = 20 * time.Millisecond
	targetTPS          = 30
	exit               = make(chan bool)
)

type wallet struct {
	Address    string `json:"address"`
	Index      int    `json:"index"`
	Path       string `json:"path"`
	PrivateKey string `json:"privateKey"`
}

func main() {
	if len(os.Args) < 2 {
		fmt.Println("Please specify a group number")
		return
	}
	group := os.Args[1]
	jsonFile, err := os.Open("wallets.json")
	if err != nil {
		fmt.Println(err)
		return
	}
	defer jsonFile.Close()
	byteValue, _ := ioutil.ReadAll(jsonFile)
	var result map[string]map[string][]wallet
	err = json.Unmarshal(byteValue, &result)
	if err != nil {
		fmt.Println(err)
		return
	}
	//addresses_0 := result["group-"+group]["zone-0-0"]
	//fmt.Printf("addresses_0: %v\n", addresses_0)
	//GenerateKeys()
	//SpamTxs(result, group)
	//ExternalTokenTransfer_(result["group-"+group], "0x142161ab0c40eb4bdbcda58662285ed917b2c61e")
	//ExternalNFTTransfer(result["group-"+group], "0x21df829d429a616afdc20df54c7f14c37cfe391c")
	SendQuai(result["group-"+group], "0x030bac2856a4629b27800af6d0891a7e05028dd0")
	/*region := -1
	for i := 0; i < NUMZONES; i++ {
		from_zone := i % 3
		if i%3 == 0 {
			region++
		}
		SendMulticall(result["group-"+group], region, from_zone)
	}*/
	//GeneratePrivKeyAndSpam()
	<-exit
}

type AddressCache struct {
	addresses [][]chan common.Address
	privKeys  [][]chan ecdsa.PrivateKey
}

func ExternalTokenTransfer(wallets map[string]map[string][]wallet, group string) {
	// ERC20X.sol Contract bytecode
	binary := "60806040523480156200001157600080fd5b506040518060400160405280601681526020017f517561692043726f73732d436861696e20546f6b656e00000000000000000000815250600f908162000058919062000970565b506040518060400160405280600381526020017f5158430000000000000000000000000000000000000000000000000000000000815250601090816200009f919062000970565b5033601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550683635c9adc5dea00000600e8190555062000127601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600e546200057f60201b60201c565b6040518060400160405280600060ff168152602001601d60ff1681525060126000600d81106200015c576200015b62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280601e60ff168152602001603a60ff1681525060126001600d8110620001d757620001d662000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280603b60ff168152602001605760ff1681525060126002600d811062000252576200025162000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280605860ff168152602001607360ff1681525060126003600d8110620002cd57620002cc62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280607460ff168152602001608f60ff1681525060126004600d811062000348576200034762000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff1602179055509050506040518060400160405280609060ff16815260200160ab60ff1681525060126005600d8110620003c357620003c262000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060ac60ff16815260200160c760ff1681525060126006600d81106200043e576200043d62000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060c860ff16815260200160e360ff1681525060126007600d8110620004b957620004b862000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff160217905550905050604051806040016040528060e460ff16815260200160ff801681525060126008600d811062000533576200053262000a57565b5b0160008201518160000160006101000a81548160ff021916908360ff16021790555060208201518160000160016101000a81548160ff021916908360ff16021790555090505062000ba1565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620005f1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005e89062000ae7565b60405180910390fd5b6200060560008383620006ec60201b60201c565b80600e600082825462000619919062000b38565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620006cc919062000b84565b60405180910390a3620006e860008383620006f160201b60201c565b5050565b505050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200077857607f821691505b6020821081036200078e576200078d62000730565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620007f87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620007b9565b620008048683620007b9565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620008516200084b62000845846200081c565b62000826565b6200081c565b9050919050565b6000819050919050565b6200086d8362000830565b620008856200087c8262000858565b848454620007c6565b825550505050565b600090565b6200089c6200088d565b620008a981848462000862565b505050565b5b81811015620008d157620008c560008262000892565b600181019050620008af565b5050565b601f8211156200092057620008ea8162000794565b620008f584620007a9565b8101602085101562000905578190505b6200091d6200091485620007a9565b830182620008ae565b50505b505050565b600082821c905092915050565b6000620009456000198460080262000925565b1980831691505092915050565b600062000960838362000932565b9150826002028217905092915050565b6200097b82620006f6565b67ffffffffffffffff81111562000997576200099662000701565b5b620009a382546200075f565b620009b0828285620008d5565b600060209050601f831160018114620009e85760008415620009d3578287015190505b620009df858262000952565b86555062000a4f565b601f198416620009f88662000794565b60005b8281101562000a2257848901518255600182019150602085019450602081019050620009fb565b8683101562000a42578489015162000a3e601f89168262000932565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000acf601f8362000a86565b915062000adc8262000a97565b602082019050919050565b6000602082019050818103600083015262000b028162000ac0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000b45826200081c565b915062000b52836200081c565b925082820190508082111562000b6d5762000b6c62000b09565b5b92915050565b62000b7e816200081c565b82525050565b600060208201905062000b9b600083018462000b73565b92915050565b612c2b8062000bb16000396000f3fe6080604052600436106101095760003560e01c8063593b79fe11610095578063a457c2d711610064578063a457c2d7146103ab578063a9059cbb146103e8578063bc472aa314610418578063dd62ed3e14610455578063e20e50ba1461049257610109565b8063593b79fe146102ea57806370a082311461032757806373cddab21461036457806395d89b411461038057610109565b806323b872dd116100dc57806323b872dd146101ca578063313ce567146102075780633950935114610232578063399444bc1461026f578063429437bf146102ac57610109565b806306fdde031461010e578063095ea7b31461013957806318160ddd1461017657806320e8dd93146101a1575b600080fd5b34801561011a57600080fd5b506101236104bb565b604051610130919061197c565b60405180910390f35b34801561014557600080fd5b50610160600480360381019061015b9190611a37565b61054d565b60405161016d9190611a92565b60405180910390f35b34801561018257600080fd5b5061018b610564565b6040516101989190611abc565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190611a37565b61056e565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190611ad7565b61066c565b6040516101fe9190611a92565b60405180910390f35b34801561021357600080fd5b5061021c61068f565b6040516102299190611b46565b60405180910390f35b34801561023e57600080fd5b5061025960048036038101906102549190611a37565b610698565b6040516102669190611a92565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190611b61565b6106c8565b6040516102a39190611b46565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190611b8e565b6107d5565b6040516102e1929190611bbb565b60405180910390f35b3480156102f657600080fd5b50610311600480360381019061030c9190611b61565b610816565b60405161031e9190611c39565b60405180910390f35b34801561033357600080fd5b5061034e60048036038101906103499190611b61565b61083f565b60405161035b9190611abc565b60405180910390f35b61037e60048036038101906103799190611c5b565b610887565b005b34801561038c57600080fd5b50610395610b30565b6040516103a2919061197c565b60405180910390f35b3480156103b757600080fd5b506103d260048036038101906103cd9190611a37565b610bc2565b6040516103df9190611a92565b60405180910390f35b61040260048036038101906103fd9190611a37565b610c32565b60405161040f9190611a92565b60405180910390f35b34801561042457600080fd5b5061043f600480360381019061043a9190611b8e565b610c8f565b60405161044c9190611ce5565b60405180910390f35b34801561046157600080fd5b5061047c60048036038101906104779190611d00565b610cc5565b6040516104899190611abc565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b49190611d6c565b610d4c565b005b6060600f80546104ca90611ddb565b80601f01602080910402602001604051908101604052809291908181526020018280546104f690611ddb565b80156105435780601f1061051857610100808354040283529160200191610543565b820191906000526020600020905b81548152906001019060200180831161052657829003601f168201915b5050505050905090565b600061055a338484610f6c565b6001905092915050565b6000600e54905090565b3373ffffffffffffffffffffffffffffffffffffffff166002610590336106c8565b60ff16600c81106105a4576105a3611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614336040516020016105ee9190611e83565b60405160208183030381529060405260405160200161060d9190611f7d565b6040516020818303038152906040529061065d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610654919061197c565b60405180910390fd5b506106688282611135565b5050565b600061067984338461128b565b610684848484611317565b600190509392505050565b60006012905090565b6000803390506106bd8185856106ae8589610cc5565b6106b89190611fd9565b610f6c565b600191505092915050565b6000806106d483610816565b6000815181106106e7576106e6611e0c565b5b602001015160f81c60f81b60f81c905060005b60098160ff1610156107945760128160ff16600d811061071d5761071c611e0c565b5b0160000160009054906101000a900460ff1660ff168260ff1610158015610772575060128160ff16600d811061075657610755611e0c565b5b0160000160019054906101000a900460ff1660ff168260ff1611155b156107815780925050506107d0565b808061078c9061200d565b9150506106fa565b506040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c790612082565b60405180910390fd5b919050565b601281600d81106107e557600080fd5b016000915090508060000160009054906101000a900460ff16908060000160019054906101000a900460ff16905082565b6060816040516020016108299190611e83565b6040516020818303038152906040529050919050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600085f7905080156108ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c5906120ee565b60405180910390fd5b6108d8338661158d565b600060026108e5886106c8565b60ff16600c81106108f9576108f8611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390612180565b60405180910390fd5b600085858561099b9190611fd9565b6109a591906121a0565b9050803410156109b48261175a565b6040516020016109c491906122d1565b60405160208183030381529060405290610a14576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0b919061197c565b60405180910390fd5b5060008888604051602401610a2a9291906122fe565b6040516020818303038152906040527f20e8dd93000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000806000835160208501898b8d60008b6000f690508973ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fcf0ee562475620bbcd2f1b0675c8163317513271e4fdbbe9722436f247bd6d998b604051610b1c9190611abc565b60405180910390a350505050505050505050565b606060108054610b3f90611ddb565b80601f0160208091040260200160405190810160405280929190818152602001828054610b6b90611ddb565b8015610bb85780601f10610b8d57610100808354040283529160200191610bb8565b820191906000526020600020905b815481529060010190602001808311610b9b57829003601f168201915b5050505050905090565b6000803390506000610bd48286610cc5565b905083811015610c19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c1090612399565b60405180910390fd5b610c268286868403610f6c565b60019250505092915050565b60008083f7905080610c79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c709061242b565b60405180910390fd5b610c84338585611317565b600191505092915050565b600281600c8110610c9f57600080fd5b016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600081f790508015610d93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8a906120ee565b60405180910390fd5b601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e1a90612497565b60405180910390fd5b60098360ff1610610e69576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6090612503565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff1660028460ff16600c8110610e9857610e97611e0c565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790612595565b60405180910390fd5b8160028460ff16600c8110610f2857610f27611e0c565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610fdb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fd290612627565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361104a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611041906126b9565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516111289190611abc565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b90612725565b60405180910390fd5b6111b0600083836118e2565b80600e60008282546111c29190611fd9565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112739190611abc565b60405180910390a3611287600083836118e7565b5050565b60006112978484610cc5565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146113115781811015611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612791565b60405180910390fd5b6113108484848403610f6c565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90612823565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036113f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ec906128b5565b60405180910390fd5b6114008383836118e2565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147d90612947565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516115749190611abc565b60405180910390a36115878484846118e7565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115f3906129d9565b60405180910390fd5b611608826000836118e2565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561168e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168590612a6b565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600e60008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117419190611abc565b60405180910390a3611755836000846118e7565b505050565b6060600082036117a1576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506118dd565b600082905060005b600082146117d35780806117bc90612a8b565b915050600a826117cc9190612b02565b91506117a9565b60008167ffffffffffffffff8111156117ef576117ee612b33565b5b6040519080825280601f01601f1916602001820160405280156118215781602001600182028036833780820191505090505b50905060008290505b600086146118d55760018161183f9190612b62565b90506000600a80886118519190612b02565b61185b91906121a0565b876118669190612b62565b60306118729190612b96565b905060008160f81b9050808484815181106118905761188f611e0c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a886118cc9190612b02565b9750505061182a565b819450505050505b919050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561192657808201518184015260208101905061190b565b60008484015250505050565b6000601f19601f8301169050919050565b600061194e826118ec565b61195881856118f7565b9350611968818560208601611908565b61197181611932565b840191505092915050565b600060208201905081810360008301526119968184611943565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119ce826119a3565b9050919050565b6119de816119c3565b81146119e957600080fd5b50565b6000813590506119fb816119d5565b92915050565b6000819050919050565b611a1481611a01565b8114611a1f57600080fd5b50565b600081359050611a3181611a0b565b92915050565b60008060408385031215611a4e57611a4d61199e565b5b6000611a5c858286016119ec565b9250506020611a6d85828601611a22565b9150509250929050565b60008115159050919050565b611a8c81611a77565b82525050565b6000602082019050611aa76000830184611a83565b92915050565b611ab681611a01565b82525050565b6000602082019050611ad16000830184611aad565b92915050565b600080600060608486031215611af057611aef61199e565b5b6000611afe868287016119ec565b9350506020611b0f868287016119ec565b9250506040611b2086828701611a22565b9150509250925092565b600060ff82169050919050565b611b4081611b2a565b82525050565b6000602082019050611b5b6000830184611b37565b92915050565b600060208284031215611b7757611b7661199e565b5b6000611b85848285016119ec565b91505092915050565b600060208284031215611ba457611ba361199e565b5b6000611bb284828501611a22565b91505092915050565b6000604082019050611bd06000830185611b37565b611bdd6020830184611b37565b9392505050565b600081519050919050565b600082825260208201905092915050565b6000611c0b82611be4565b611c158185611bef565b9350611c25818560208601611908565b611c2e81611932565b840191505092915050565b60006020820190508181036000830152611c538184611c00565b905092915050565b600080600080600060a08688031215611c7757611c7661199e565b5b6000611c85888289016119ec565b9550506020611c9688828901611a22565b9450506040611ca788828901611a22565b9350506060611cb888828901611a22565b9250506080611cc988828901611a22565b9150509295509295909350565b611cdf816119c3565b82525050565b6000602082019050611cfa6000830184611cd6565b92915050565b60008060408385031215611d1757611d1661199e565b5b6000611d25858286016119ec565b9250506020611d36858286016119ec565b9150509250929050565b611d4981611b2a565b8114611d5457600080fd5b50565b600081359050611d6681611d40565b92915050565b60008060408385031215611d8357611d8261199e565b5b6000611d9185828601611d57565b9250506020611da2858286016119ec565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611df357607f821691505b602082108103611e0657611e05611dac565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008160601b9050919050565b6000611e5382611e3b565b9050919050565b6000611e6582611e48565b9050919050565b611e7d611e78826119c3565b611e5a565b82525050565b6000611e8f8284611e6c565b60148201915081905092915050565b600081905092915050565b7f53656e6465722000000000000000000000000000000000000000000000000000600082015250565b6000611edf600783611e9e565b9150611eea82611ea9565b600782019050919050565b600081905092915050565b6000611f0b82611be4565b611f158185611ef5565b9350611f25818560208601611908565b80840191505092915050565b7f206e6f7420617070726f76656400000000000000000000000000000000000000600082015250565b6000611f67600d83611e9e565b9150611f7282611f31565b600d82019050919050565b6000611f8882611ed2565b9150611f948284611f00565b9150611f9f82611f5a565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611fe482611a01565b9150611fef83611a01565b925082820190508082111561200757612006611faa565b5b92915050565b600061201882611b2a565b915060ff820361202b5761202a611faa565b5b600182019050919050565b7f496e76616c6964204c6f636174696f6e00000000000000000000000000000000600082015250565b600061206c6010836118f7565b915061207782612036565b602082019050919050565b6000602082019050818103600083015261209b8161205f565b9050919050565b7f41646472657373206973206e6f742065787465726e616c000000000000000000600082015250565b60006120d86017836118f7565b91506120e3826120a2565b602082019050919050565b60006020820190508181036000830152612107816120cb565b9050919050565b7f546f6b656e206973206e6f7420617661696c61626c65206f6e2074686520646560008201527f7374696e6174696f6e20636861696e0000000000000000000000000000000000602082015250565b600061216a602f836118f7565b91506121758261210e565b604082019050919050565b600060208201905081810360008301526121998161215d565b9050919050565b60006121ab82611a01565b91506121b683611a01565b92508282026121c481611a01565b915082820484148315176121db576121da611faa565b5b5092915050565b7f4e6f7420656e6f756768206761732073656e742c206e656564206174206c656160008201527f7374200000000000000000000000000000000000000000000000000000000000602082015250565b600061223e602383611e9e565b9150612249826121e2565b602382019050919050565b600061225f826118ec565b6122698185611e9e565b9350612279818560208601611908565b80840191505092915050565b7f2077656900000000000000000000000000000000000000000000000000000000600082015250565b60006122bb600483611e9e565b91506122c682612285565b600482019050919050565b60006122dc82612231565b91506122e88284612254565b91506122f3826122ae565b915081905092915050565b60006040820190506123136000830185611cd6565b6123206020830184611aad565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006123836025836118f7565b915061238e82612327565b604082019050919050565b600060208201905081810360008301526123b281612376565b9050919050565b7f416464726573732069732065787465726e616c2e205573652063726f73732d6360008201527f6861696e207472616e736665722066756e6374696f6e2e000000000000000000602082015250565b60006124156037836118f7565b9150612420826123b9565b604082019050919050565b6000602082019050818103600083015261244481612408565b9050919050565b7f53656e646572206973206e6f74206465706c6f79657200000000000000000000600082015250565b60006124816016836118f7565b915061248c8261244b565b602082019050919050565b600060208201905081810360008301526124b081612474565b9050919050565b7f4d61782039207a6f6e6573000000000000000000000000000000000000000000600082015250565b60006124ed600b836118f7565b91506124f8826124b7565b602082019050919050565b6000602082019050818103600083015261251c816124e0565b9050919050565b7f54686520617070726f766564206164647265737320666f722074686973207a6f60008201527f6e6520616c726561647920657869737473000000000000000000000000000000602082015250565b600061257f6031836118f7565b915061258a82612523565b604082019050919050565b600060208201905081810360008301526125ae81612572565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006126116024836118f7565b915061261c826125b5565b604082019050919050565b6000602082019050818103600083015261264081612604565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006126a36022836118f7565b91506126ae82612647565b604082019050919050565b600060208201905081810360008301526126d281612696565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061270f601f836118f7565b915061271a826126d9565b602082019050919050565b6000602082019050818103600083015261273e81612702565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061277b601d836118f7565b915061278682612745565b602082019050919050565b600060208201905081810360008301526127aa8161276e565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061280d6025836118f7565b9150612818826127b1565b604082019050919050565b6000602082019050818103600083015261283c81612800565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b600061289f6023836118f7565b91506128aa82612843565b604082019050919050565b600060208201905081810360008301526128ce81612892565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006129316026836118f7565b915061293c826128d5565b604082019050919050565b6000602082019050818103600083015261296081612924565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b60006129c36021836118f7565b91506129ce82612967565b604082019050919050565b600060208201905081810360008301526129f2816129b6565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a556022836118f7565b9150612a60826129f9565b604082019050919050565b60006020820190508181036000830152612a8481612a48565b9050919050565b6000612a9682611a01565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ac857612ac7611faa565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612b0d82611a01565b9150612b1883611a01565b925082612b2857612b27612ad3565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000612b6d82611a01565b9150612b7883611a01565b9250828203905081811115612b9057612b8f611faa565b5b92915050565b6000612ba182611b2a565b9150612bac83611b2a565b9250828201905060ff811115612bc557612bc4611faa565b5b9291505056fea2646970667358221220ab6a75e621933d75fcdb9dabdd7f9d2f85f1e994467ae8097a6ea39b07286ca864736f6c63782c302e382e31382d646576656c6f702e323032322e31312e382b636f6d6d69742e36306161353861362e6d6f64005d"

	config, err := util.LoadConfig(".")
	if err != nil {
		fmt.Println("cannot load config: " + err.Error())
		return
	}
	allClients := getNodeClients(config)
	region := 0
	from_zone := 0
	if !allClients.zonesAvailable[region][from_zone] {
		return
	}

	client := allClients.zoneClients[region][from_zone] // cyprus 1 node client
	signer := types.LatestSigner(PARAMS)
	zoneWallets := wallets["group-"+group]["zone-"+fmt.Sprintf("%d-%d", region, from_zone)] // get wallet from file
	fromAddr := common.HexToAddress(zoneWallets[0].Address)
	fromPrivKey, err := crypto.ToECDSA(common.FromHex(zoneWallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	cyprus2Client := allClients.zoneClients[region][from_zone+1]                                 // cyprus 2 node client
	cyprus2Wallets := wallets["group-"+group]["zone-"+fmt.Sprintf("%d-%d", region, from_zone+1)] // get cyprus2 wallet from file

	common.NodeLocation = *fromAddr.Location()
	nonce, err := client.PendingNonceAt(context.Background(), fromAddr)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Check balance
	balance, err := client.BalanceAt(context.Background(), fromAddr, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Printf("Balance of %s: %s\n", fromAddr.String(), balance.String())
	// Deploy QXC contract with the proper address that gives me tokens in zone 0-0
	contract, err := hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i := uint8(0)
	contract = append(contract, i)
	var contractAddr common.Address
	// Grind contract address
	for {
		contract[len(contract)-1] = i
		contractAddr = crypto.CreateAddress(fromAddr, nonce, contract)
		if common.IsInChainScope(contractAddr.Bytes()) {
			break
		}
		i++
	}
	// Construct deployment tx
	inner_tx := types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err := types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	gas, err := client.EstimateGas(context.Background(), interfaces.CallMsg{From: fromAddr, To: nil, Gas: 0, GasPrice: MAXFEE, GasFeeCap: MAXFEE, GasTipCap: MINERTIP, Value: common.Big0, Data: contract, AccessList: inner_tx.AccessList})
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	fmt.Println("gas: ", gas)
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	time.Sleep(5 * time.Second) // Wait for it to be mined
	tx, isPending, err := client.TransactionByHash(context.Background(), tx.Hash())
	fmt.Printf("tx: %+v isPending: %v err: %v\n", tx, isPending, err)
	receipt, err := client.TransactionReceipt(context.Background(), tx.Hash())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	logs, err := client.FilterLogs(context.Background(), interfaces.FilterQuery{Addresses: []common.Address{contractAddr}, Topics: [][]common.Hash{receipt.Logs[0].Topics}})
	fmt.Printf("logs: %+v err: %v\n", logs, err)
	cyprus2Addr := common.HexToAddress(cyprus2Wallets[0].Address)
	cyprus2PrivKey, err := crypto.ToECDSA(common.FromHex(cyprus2Wallets[0].PrivateKey))
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	common.NodeLocation = *cyprus2Addr.Location()
	cyprus2Nonce, err := cyprus2Client.PendingNonceAt(context.Background(), cyprus2Addr)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	// Deploy QXC contract with the proper address that gives me tokens in zone 0-1
	contract, err = hex.DecodeString(binary)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	i = uint8(0)
	contract = append(contract, i)
	var cyprus2ContractAddr common.Address
	// Grind contract address
	for {
		contract[len(contract)-1] = i
		cyprus2ContractAddr = crypto.CreateAddress(cyprus2Addr, cyprus2Nonce, contract)
		if common.IsInChainScope(cyprus2ContractAddr.Bytes()) {
			break
		}
		i++
	}
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: cyprus2Nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 4000000, To: nil, Value: common.Big0, Data: contract}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, cyprus2PrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = cyprus2Client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Here, set contractAddr as an approved contract for zone 0-0 (chain 0) in zone 0-1
	sig := crypto.Keccak256([]byte("AddApprovedAddress(uint8,address)"))[:4]
	chain := uint256.NewInt(0)
	approvedAddress := new(uint256.Int).SetBytes(contractAddr.Bytes())
	data := make([]byte, 0, 0)
	data = append(data, sig...)
	temp := chain.Bytes32()
	data = append(data, temp[:]...)
	temp = approvedAddress.Bytes32()
	data = append(data, temp[:]...)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: cyprus2Nonce + 1, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &cyprus2ContractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, cyprus2PrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = cyprus2Client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Here, set cyprus2ContractAddr as an approved contract for zone 0-1 (chain 1) in zone 0-0
	sig = crypto.Keccak256([]byte("AddApprovedAddress(uint8,address)"))[:4]
	chain = uint256.NewInt(1)
	approvedAddress = new(uint256.Int).SetBytes(cyprus2ContractAddr.Bytes())
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = chain.Bytes32()
	data = append(data, temp[:]...)
	temp = approvedAddress.Bytes32()
	data = append(data, temp[:]...)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce + 1, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &contractAddr, Value: common.Big0, Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(5 * time.Second)
	// Transfer 1 token from my address in zone 0-0 (cyprus 1) to zone 0-1 (cyprus 2)
	sig = crypto.Keccak256([]byte("crossChainTransfer(address,uint256,uint256,uint256,uint256)"))[:4] // crossChainTransfer(address to, uint256 amount, uint256 gasLimit, uint256 minerTip, uint256 baseFee)
	to, err := uint256.FromHex(cyprus2Addr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	amount := uint256.NewInt(1)
	gasLimit := uint256.NewInt(1000000)
	minerTip := new(uint256.Int).SetBytes(new(big.Int).Mul(MINERTIP, big.NewInt(2)).Bytes())
	baseFee := new(uint256.Int).SetBytes(new(big.Int).Mul(MAXFEE, big.NewInt(2)).Bytes())
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)
	temp = amount.Bytes32()
	data = append(data, temp[:]...)
	temp = gasLimit.Bytes32()
	data = append(data, temp[:]...)
	temp = minerTip.Bytes32()
	data = append(data, temp[:]...)
	temp = baseFee.Bytes32()
	data = append(data, temp[:]...)
	// Value sent in the transaction to the contract is (ETX minerTip + ETX baseFee) * gasLimit
	value := minerTip.Add(minerTip, baseFee).Mul(minerTip, gasLimit)
	inner_tx = types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce + 2, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: 1000000, To: &contractAddr, Value: value.ToBig(), Data: data}
	tx, err = types.SignTx(types.NewTx(&inner_tx), signer, fromPrivKey)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	err = client.SendTransaction(context.Background(), tx)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	time.Sleep(30 * time.Second) // wait for 1 region block in cyprus 1 and 1 region block in cyprus 2 (plus zone blocks)
	// Check balance in zone 0-1
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	temp = to.Bytes32()
	data = append(data, temp[:]...)

	data, err = cyprus2Client.CallContract(context.Background(), interfaces.CallMsg{From: cyprus2Addr, To: &cyprus2ContractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of cyprus2Addr in zone 0-1: " + balance.String())
	// Check balance in zone 0-0
	sig = crypto.Keccak256([]byte("balanceOf(address)"))[:4]
	data = make([]byte, 0, 0)
	data = append(data, sig...)
	from, err := uint256.FromHex(fromAddr.Hex())
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	temp = from.Bytes32()
	data = append(data, temp[:]...)

	data, err = client.CallContract(context.Background(), interfaces.CallMsg{From: fromAddr, To: &contractAddr, Data: data}, nil)
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	balance.SetBytes(data)
	fmt.Println("balance of fromAddr in zone 0-0: " + balance.String())
	tx, isPending, err = client.TransactionByHash(context.Background(), tx.Hash())
	fmt.Printf("tx: %+v isPending: %v err: %v\n", tx, isPending, err)
	logs, err = client.FilterLogs(context.Background(), interfaces.FilterQuery{Addresses: []common.Address{contractAddr}})
	fmt.Printf("logs: %+v err: %v\n", logs, err)
	logs, err = client.FilterLogs(context.Background(), interfaces.FilterQuery{Addresses: []common.Address{fromAddr}})
	fmt.Printf("logs: %+v err: %v\n", logs, err)
}

func SpamTxs(wallets map[string]map[string][]wallet, group string) {
	config, err := util.LoadConfig(".")
	if err != nil {
		fmt.Println("cannot load config: " + err.Error())
		return
	}
	allClients := getNodeClients(config)
	region := -1
	for i := 0; i < NUMZONES; i++ {
		from_zone := i % 3
		if i%3 == 0 {
			region++
		}

		go func(from_zone int, region int) {
			if !allClients.zonesAvailable[region][from_zone] {
				return
			}
			client := allClients.zoneClients[region][from_zone]
			signer := types.LatestSigner(PARAMS)
			zoneWallets := wallets["group-"+group]["zone-"+fmt.Sprintf("%d-%d", region, from_zone)]
			walletIndex := 0
			walletsPerBlock := WALLETSPERBLOCK
			txsSent := 0
			nonces := make(map[common.AddressBytes]uint64)
			sleepPerTx := startingSleepPerTx
			errCount := 0
			shouldWalkUp := true

			start := time.Now()
			walkUpTime := time.Now()
			for x := 0; true; x++ {
				fromAddr := common.HexToAddress(zoneWallets[walletIndex].Address)
				fromPrivKey, err := crypto.ToECDSA(common.FromHex(zoneWallets[walletIndex].PrivateKey))
				if err != nil {
					fmt.Println(err.Error())
					return
				}
				if _, exists := nonces[fromAddr.Bytes20()]; !exists {
					nonce, err := client.PendingNonceAt(context.Background(), fromAddr)
					if err != nil {
						fmt.Println(err.Error())
						if walletIndex < len(zoneWallets)-1 {
							walletIndex++
						} else {
							walletIndex = 0
						}
						continue // try the next wallet
					}
					nonces[fromAddr.Bytes20()] = nonce
				}
				nonce := nonces[fromAddr.Bytes20()]
				var toAddr common.Address
				var tx *types.Transaction
				if x%5 == 0 { // Change to true for all ETXs
					otherZone := wallets["group-"+group]["zone-"+fmt.Sprintf("%d-%d", region, (from_zone+1)%3)] // Cross Region
					toAddr = common.HexToAddress(otherZone[len(zoneWallets)-1-walletIndex].Address)
					inner_tx := types.InternalToExternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, ETXGasPrice: new(big.Int).Mul(MAXFEE, calcEtxFeeMultiplier(fromAddr, toAddr)), ETXGasLimit: 21000, ETXGasTip: new(big.Int).Mul(MINERTIP, calcEtxFeeMultiplier(fromAddr, toAddr)), Gas: GAS * 3, To: &toAddr, Value: VALUE, Data: nil, AccessList: types.AccessList{}}
					tx = types.NewTx(&inner_tx)
				} else if x%9 == 0 {
					otherRegion := wallets["group-"+group]["zone-"+fmt.Sprintf("%d-%d", (region+1)%3, (from_zone+1)%3)] // Cross Prime
					toAddr = common.HexToAddress(otherRegion[len(zoneWallets)-1-walletIndex].Address)
					inner_tx := types.InternalToExternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, ETXGasPrice: new(big.Int).Mul(MAXFEE, calcEtxFeeMultiplier(fromAddr, toAddr)), ETXGasLimit: 21000, ETXGasTip: new(big.Int).Mul(MINERTIP, calcEtxFeeMultiplier(fromAddr, toAddr)), Gas: GAS * 3, To: &toAddr, Value: VALUE, Data: nil, AccessList: types.AccessList{}}
					tx = types.NewTx(&inner_tx)
				} else {
					toAddr = common.HexToAddress(zoneWallets[len(zoneWallets)-1-walletIndex].Address)
					inner_tx := types.InternalTx{ChainID: PARAMS.ChainID, Nonce: nonce, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: GAS, To: &toAddr, Value: VALUE, Data: nil, AccessList: types.AccessList{}}
					tx = types.NewTx(&inner_tx)
				}
				tx, err = types.SignTx(tx, signer, fromPrivKey)
				if err != nil {
					fmt.Println(err.Error())
					return
				}
				err = client.SendTransaction(context.Background(), tx)
				if err != nil {
					fmt.Printf("zone-" + fmt.Sprintf("%d-%d", region, from_zone) + ": " + err.Error() + "\n")
					if err == core.ErrReplaceUnderpriced || err == core.ErrNonceTooLow || err == core.ErrAlreadyKnown {
						nonces[fromAddr.Bytes20()]++ // optional: ask the node for the correct pending nonce
						continue                     // do not increment walletIndex, try again with the same wallet
					} else if err == core.ErrInsufficientFunds {
						if walletIndex < len(zoneWallets)-1 {
							walletIndex++
						} else {
							walletIndex = 0
						}
						continue // try the next wallet
					} else {
						errCount++
						time.Sleep(time.Second * time.Duration(errCount))
					}
				} else {
					if enableSleepPerTx && sleepPerTx.Nanoseconds() != 0 {
						randomNanoseconds := random.Intn(int(sleepPerTx.Nanoseconds()))
						time.Sleep(time.Duration(randomNanoseconds * 2))
					}
					errCount = 0
				}
				if walletIndex < len(zoneWallets)-1 {
					walletIndex++
				} else {
					walletIndex = 0
				}
				txsSent++
				nonces[fromAddr.Bytes20()]++

				if txsSent%walletsPerBlock == 0 && walletIndex != 0 { // not perfect math in the case that walletIndex wraps around to zero
					elapsed := time.Since(start)
					tps := float64(walletsPerBlock) / elapsed.Seconds()
					fmt.Printf("zone-"+fmt.Sprintf("%d-%d", region, from_zone)+": Time elapsed for %d txs: %d ms\n", walletsPerBlock, elapsed.Milliseconds())
					fmt.Printf("zone-"+fmt.Sprintf("%d-%d", region, from_zone)+": TPS: %f\n", tps)
					fmt.Printf("zone-"+fmt.Sprintf("%d-%d", region, from_zone)+": Txs Sent: %d\n", txsSent)

					tpsInNS := float64(walletsPerBlock) / float64(elapsed.Nanoseconds())
					newSleepBasedOnCalcTPS := float64(sleepPerTx.Nanoseconds()) * (tpsInNS / float64(float64(targetTPS)/1e9)) // newSleep = oldSleep * (tps / targetTPS)
					sleepPerTx = time.Duration(newSleepBasedOnCalcTPS)
					fmt.Printf("zone-"+fmt.Sprintf("%d-%d", region, from_zone)+": New Sleep: %d ms\n", sleepPerTx.Milliseconds())
					start = time.Now()
					/*sleepyTime := (10 * time.Second) - elapsed
					if sleepyTime < 0 {
						sleepyTime = 0
					}
					time.Sleep(sleepyTime)*/
					if tps > float64(targetTPS) {
						shouldWalkUp = false
					} else {
						shouldWalkUp = true
					}
				}
				if time.Since(walkUpTime) >= 100*time.Second && int(float64(walletsPerBlock)*1.1) < len(zoneWallets) && shouldWalkUp {
					walletsPerBlock = int(float64(walletsPerBlock) * 1.1)
					walkUpTime = time.Now()
				}

			}
		}(from_zone, region)
	}
}

func GeneratePrivKeyAndSpam() {
	addrCache := &AddressCache{
		addresses: make([][]chan common.Address, 3),
		privKeys:  make([][]chan ecdsa.PrivateKey, 3),
	}
	for i := range addrCache.addresses {
		addrCache.addresses[i] = make([]chan common.Address, 3)
		for x := range addrCache.addresses[i] {
			addrCache.addresses[i][x] = make(chan common.Address, 1000000)
		}
	}
	for i := range addrCache.privKeys {
		addrCache.privKeys[i] = make([]chan ecdsa.PrivateKey, 3)
		for x := range addrCache.privKeys[i] {
			addrCache.privKeys[i][x] = make(chan ecdsa.PrivateKey, 1000000)
		}
	}
	go GenerateAddresses(addrCache)
	time.Sleep(time.Second * 5)
	config, err := util.LoadConfig(".")
	if err != nil {
		fmt.Println("cannot load config: " + err.Error())
		return
	}
	allClients := getNodeClients(config)

	region := -1
	for i := 0; i < 1; i++ {
		from_zone := i % 3
		if i%3 == 0 {
			region++
		}
		addrCache.addresses = append(addrCache.addresses, make([]chan common.Address, 0, 0))
		go func(from_zone int, region int, addrCache *AddressCache) {
			if !allClients.zonesAvailable[region][from_zone] {
				return
			}
			client := allClients.zoneClients[region][from_zone]
			signer := types.LatestSigner(PARAMS)
			var toAddr common.Address
			start1 := time.Now()
			start2 := time.Now()
			for x := 0; true; x++ {
				fromKey := <-addrCache.privKeys[region][from_zone]
				fromAddr := crypto.PubkeyToAddress(fromKey.PublicKey)
				var tx *types.Transaction
				if x%1000 == 0 && x != 0 {
					fmt.Println("Time elapsed for 1000 txs in ms: ", time.Since(start2).Milliseconds())
					start2 = time.Now()
				}
				if x%5 == 0 { // Change to true for all ETXs
					toAddr = ChooseRandomETXAddress(addrCache, region, from_zone)
					// Change the params
					inner_tx := types.InternalToExternalTx{ChainID: PARAMS.ChainID, Nonce: 0, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, ETXGasPrice: new(big.Int).Mul(MAXFEE, calcEtxFeeMultiplier(fromAddr, toAddr)), ETXGasLimit: 21000, ETXGasTip: new(big.Int).Mul(MINERTIP, calcEtxFeeMultiplier(fromAddr, toAddr)), Gas: GAS * 3, To: &toAddr, Value: VALUE, Data: nil, AccessList: types.AccessList{}}
					tx = types.NewTx(&inner_tx)
				} else {
					// Change the params
					toAddr = <-addrCache.addresses[region][from_zone]
					toAddr = <-addrCache.addresses[region][from_zone] // twice so we don't send to the same address
					inner_tx := types.InternalTx{ChainID: PARAMS.ChainID, Nonce: 0, GasTipCap: MINERTIP, GasFeeCap: MAXFEE, Gas: GAS, To: &toAddr, Value: VALUE, Data: nil, AccessList: types.AccessList{}}
					tx = types.NewTx(&inner_tx)
				}
				tx, err = types.SignTx(tx, signer, &fromKey)
				if err != nil {
					fmt.Println(err.Error())
					return
				}
				err = client.SendTransaction(context.Background(), tx)
				if err != nil {
					fmt.Println(err.Error())
				}
				time.Sleep(5000 * time.Millisecond)
			}
			elapsed := time.Since(start1)
			fmt.Println("Time elapsed for all txs in ms: ", elapsed.Milliseconds())
		}(from_zone, region, addrCache)
	}
}

func ChooseRandomETXAddress(addrCache *AddressCache, region, zone int) common.Address {
	r, z := random.Intn(3), random.Intn(3)
	if r == region {
		return ChooseRandomETXAddress(addrCache, region, zone)
	} else if z == zone {
		return ChooseRandomETXAddress(addrCache, region, zone)
	}
	toAddr := <-addrCache.addresses[r][z]
	return toAddr
}

func GenerateAddresses(addrCache *AddressCache) {
	for {
		privKey, err := ecdsa.GenerateKey(crypto.S256(), rand.Reader)
		if err != nil {
			fmt.Println(err.Error())
			continue
		}
		addr := crypto.PubkeyToAddress(privKey.PublicKey)
		location := Location(addr)
		if location == nil {
			continue
		}
		if location.HasZone() {
			addrCache.addresses[location.Region()][location.Zone()] <- addr
			addrCache.privKeys[location.Region()][location.Zone()] <- *privKey
		}
	}
}

// Block struct to hold all Client fields.
type orderedBlockClients struct {
	primeClient      *ethclient.Client
	primeAvailable   bool
	regionClients    []*ethclient.Client
	regionsAvailable []bool
	zoneClients      [][]*ethclient.Client
	zonesAvailable   [][]bool
	zoneAccounts     [][]accounts.Account
	zoneWallets      [][]wallet
	walletLock       deadlock.RWMutex
}

// getNodeClients takes in a config and retrieves the Prime, Region, and Zone client
// that is used for mining in a slice.
func getNodeClients(config util.Config) orderedBlockClients {

	// initializing all the clients
	allClients := orderedBlockClients{
		primeAvailable:   false,
		regionClients:    make([]*ethclient.Client, 3),
		regionsAvailable: make([]bool, 3),
		zoneClients:      make([][]*ethclient.Client, 3),
		zonesAvailable:   make([][]bool, 3),
		zoneAccounts:     make([][]accounts.Account, 3),
	}

	for i := range allClients.zoneClients {
		allClients.zoneClients[i] = make([]*ethclient.Client, 3)
	}
	for i := range allClients.zonesAvailable {
		allClients.zonesAvailable[i] = make([]bool, 3)
	}
	for i := range allClients.zoneClients {
		allClients.zoneAccounts[i] = make([]accounts.Account, 3)
	}

	// add Prime to orderedBlockClient array at [0]
	if config.PrimeURL != "" {
		primeClient, err := ethclient.Dial(config.PrimeURL)
		if err != nil {
			fmt.Println("Unable to connect to node:", "Prime", config.PrimeURL)
		} else {
			allClients.primeClient = primeClient
			allClients.primeAvailable = true
		}
	}

	// loop to add Regions to orderedBlockClient
	// remember to set true value for Region to be mined
	for i, regionURL := range config.RegionURLs {
		if regionURL != "" {
			regionClient, err := ethclient.Dial(regionURL)
			if err != nil {
				fmt.Println("Unable to connect to node:", "Region", i+1, regionURL)
				allClients.regionsAvailable[i] = false
			} else {
				allClients.regionsAvailable[i] = true
				allClients.regionClients[i] = regionClient
			}
		}
	}

	// loop to add Zones to orderedBlockClient
	// remember ZoneURLS is a 2D array
	for i, zonesURLs := range config.ZoneURLs {
		for j, zoneURL := range zonesURLs {
			if zoneURL != "" {
				zoneClient, err := ethclient.Dial(zoneURL)
				if err != nil {
					fmt.Println("Unable to connect to node:", "Zone", i+1, j+1, zoneURL)
					allClients.zonesAvailable[i][j] = false
				} else {
					allClients.zonesAvailable[i][j] = true
					allClients.zoneClients[i][j] = zoneClient
				}
			}
		}
	}
	return allClients
}

func addAccToClient(clients *orderedBlockClients, acc accounts.Account, i int) {
	switch i {
	case 0:
		common.NodeLocation = []byte{0, 0}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[0][0] = acc
	case 1:
		common.NodeLocation = []byte{0, 1}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[0][1] = acc
	case 2:
		common.NodeLocation = []byte{0, 2}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[0][2] = acc
	case 3:
		common.NodeLocation = []byte{1, 0}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[1][0] = acc
	case 4:
		common.NodeLocation = []byte{1, 1}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[1][1] = acc
	case 5:
		common.NodeLocation = []byte{1, 2}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[1][2] = acc
	case 6:
		common.NodeLocation = []byte{2, 0}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[2][0] = acc
	case 7:
		common.NodeLocation = []byte{2, 1}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[2][1] = acc
	case 8:
		common.NodeLocation = []byte{2, 2}
		if !common.IsInChainScope(acc.Address.Bytes()) {
			panic("Account not in chain scope" + acc.Address.String())
		}
		clients.zoneAccounts[2][2] = acc
	default:
		panic("Error adding account to client, chain not found " + fmt.Sprint(i) + acc.Address.String())
	}
}

func Location(a common.Address) *common.Location {

	// Search zone->region->prime address spaces in-slice first, and then search
	// zone->region out-of-slice address spaces next. This minimizes expected
	// search time under the following assumptions:
	// * a node is more likely to encounter a TX from its slice than from another
	// * we expect `>= Z` `zone` TXs for every `region` TX
	// * we expect `>= R` `region` TXs for every `prime` TX
	// * (and by extension) we expect `>= R*Z` `zone` TXs for every `prime` TX
	primeChecked := false
	for r := 0; r < common.NumRegionsInPrime; r++ {
		for z := 0; z < common.NumZonesInRegion; z++ {
			l := common.Location{byte(r), byte(z)}
			if l.ContainsAddress(a) {
				return &l
			}
		}
		l := common.Location{byte(r)}
		if l.ContainsAddress(a) {
			return &l
		}
		// Check prime on first pass through slice, but not again
		if !primeChecked {
			primeChecked = true
			l := common.Location{}
			if l.ContainsAddress(a) {
				return &l
			}
		}
	}
	return nil
}

func GenerateKeys() {
	ks := keystore.NewKeyStore(filepath.Join(os.Getenv("HOME"), ".test", "keys"), keystore.StandardScryptN, keystore.StandardScryptP)
	if len(ks.Accounts()) > 0 {
		fmt.Println("Already have keys, please delete the .test directory if you want to generate new keys")
		return
	}

	foundAddrs := 0
	common.NodeLocation = []byte{0, 0}
	fmt.Println("cyprus1")
	addrs := make([]common.Address, 0)

	for i := 0; i < 10000; i++ {
		privKey, err := ecdsa.GenerateKey(crypto.S256(), rand.Reader)
		if err != nil {
			fmt.Println(err.Error())
			return
		}
		addr := crypto.PubkeyToAddress(privKey.PublicKey)
		if common.IsInChainScope(addr.Bytes()) {
			fmt.Println(addr.Hex())
			fmt.Println(crypto.FromECDSA(privKey))
			ks.ImportECDSA(privKey, "")
			addrs = append(addrs, addr)
			foundAddrs++
		}
		if foundAddrs == 1 {
			foundAddrs = 0
			switch common.NodeLocation.Name() {
			case "cyprus1":
				common.NodeLocation = []byte{0, 1}
				fmt.Println(common.NodeLocation.Name())
			case "cyprus2":
				common.NodeLocation = []byte{0, 2}
				fmt.Println(common.NodeLocation.Name())
			case "cyprus3":
				common.NodeLocation = []byte{1, 0}
				fmt.Println(common.NodeLocation.Name())
			case "paxos1":
				common.NodeLocation = []byte{1, 1}
				fmt.Println(common.NodeLocation.Name())
			case "paxos2":
				common.NodeLocation = []byte{1, 2}
				fmt.Println(common.NodeLocation.Name())
			case "paxos3":
				common.NodeLocation = []byte{2, 0}
				fmt.Println(common.NodeLocation.Name())
			case "hydra1":
				common.NodeLocation = []byte{2, 1}
				fmt.Println(common.NodeLocation.Name())
			case "hydra2":
				common.NodeLocation = []byte{2, 2}
				fmt.Println(common.NodeLocation.Name())
			case "hydra3":
				i = 10000
			}
		}
	}

	fmt.Println("ZONE_0_0_COINBASE=" + addrs[0].String())
	fmt.Println("ZONE_0_1_COINBASE=" + addrs[1].String())
	fmt.Println("ZONE_0_2_COINBASE=" + addrs[2].String())
	fmt.Println("ZONE_1_0_COINBASE=" + addrs[3].String())
	fmt.Println("ZONE_1_1_COINBASE=" + addrs[4].String())
	fmt.Println("ZONE_1_2_COINBASE=" + addrs[5].String())
	fmt.Println("ZONE_2_0_COINBASE=" + addrs[6].String())
	fmt.Println("ZONE_2_1_COINBASE=" + addrs[7].String())
	fmt.Println("ZONE_2_2_COINBASE=" + addrs[8].String())

}
